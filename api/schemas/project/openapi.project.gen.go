// Package project provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package project

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
)

// Project defines model for project.
type Project struct {
	CreatedAt   time.Time  `json:"created_at" mapstructure:"created_at"`
	Description *string    `json:"description,omitempty" mapstructure:"description"`
	EndDate     *time.Time `json:"end_date,omitempty" mapstructure:"end_date"`
	ProjectId   int64      `json:"project_id" mapstructure:"project_id"`
	ProjectName string     `json:"project_name" mapstructure:"project_name"`
	StartDate   *time.Time `json:"start_date,omitempty" mapstructure:"start_date"`
	Status      *string    `json:"status,omitempty" mapstructure:"status"`
	UpdatedAt   time.Time  `json:"updated_at" mapstructure:"updated_at"`
}

// ProjectCreateRequest defines model for project_create_request.
type ProjectCreateRequest struct {
	Description *string    `json:"description,omitempty" mapstructure:"description"`
	EndDate     *time.Time `json:"end_date,omitempty" mapstructure:"end_date"`
	ProjectName string     `json:"project_name" mapstructure:"project_name"`
	StartDate   *time.Time `json:"start_date,omitempty" mapstructure:"start_date"`
	Status      *string    `json:"status,omitempty" mapstructure:"status"`
}

// ProjectCreateResponse defines model for project_create_response.
type ProjectCreateResponse struct {
	Project Project `json:"project"`
}

// ProjectDeleteRequest defines model for project_delete_request.
type ProjectDeleteRequest struct {
	ProjectId int64 `json:"project_id" mapstructure:"project_id"`
}

// ProjectDeleteResponse defines model for project_delete_response.
type ProjectDeleteResponse struct {
	Message string `json:"message" mapstructure:"message"`
}

// ProjectMember defines model for project_member.
type ProjectMember struct {
	CreatedAt time.Time `json:"created_at" mapstructure:"created_at"`
	MemberId  int64     `json:"member_id" mapstructure:"member_id"`
	ProjectId int64     `json:"project_id" mapstructure:"project_id"`
	Role      string    `json:"role" mapstructure:"role"`
	UpdatedAt time.Time `json:"updated_at" mapstructure:"updated_at"`
}

// ProjectMemberCreateRequest defines model for project_member_create_request.
type ProjectMemberCreateRequest struct {
	MemberId  int64  `json:"member_id" mapstructure:"member_id"`
	ProjectId int64  `json:"project_id" mapstructure:"project_id"`
	Role      string `json:"role" mapstructure:"role"`
}

// ProjectMemberCreateResponse defines model for project_member_create_response.
type ProjectMemberCreateResponse struct {
	ProjectMember ProjectMember `json:"project_member"`
}

// ProjectMemberDeleteRequest defines model for project_member_delete_request.
type ProjectMemberDeleteRequest struct {
	MemberId  int64 `json:"member_id" mapstructure:"member_id"`
	ProjectId int64 `json:"project_id" mapstructure:"project_id"`
}

// ProjectMemberDeleteResponse defines model for project_member_delete_response.
type ProjectMemberDeleteResponse struct {
	Message string `json:"message" mapstructure:"message"`
}

// ProjectMemberRequest defines model for project_member_request.
type ProjectMemberRequest struct {
	MemberId  int64 `json:"member_id" mapstructure:"member_id"`
	ProjectId int64 `json:"project_id" mapstructure:"project_id"`
}

// ProjectMemberResponse defines model for project_member_response.
type ProjectMemberResponse struct {
	ProjectMember ProjectMember `json:"project_member"`
}

// ProjectMemberUpdateRequest defines model for project_member_update_request.
type ProjectMemberUpdateRequest struct {
	MemberId  int64   `json:"member_id" mapstructure:"member_id"`
	ProjectId int64   `json:"project_id" mapstructure:"project_id"`
	Role      *string `json:"role,omitempty" mapstructure:"role"`
}

// ProjectMemberUpdateResponse defines model for project_member_update_response.
type ProjectMemberUpdateResponse struct {
	ProjectMember ProjectMember `json:"project_member"`
}

// ProjectMembersRequest defines model for project_members_request.
type ProjectMembersRequest struct {
	ProjectId int64 `json:"project_id" mapstructure:"project_id"`
}

// ProjectMembersResponse defines model for project_members_response.
type ProjectMembersResponse struct {
	ProjectMembers []ProjectMember `json:"project_members" mapstructure:"project_members"`
}

// ProjectRequest defines model for project_request.
type ProjectRequest struct {
	ProjectId int64 `json:"project_id" mapstructure:"project_id"`
}

// ProjectResponse defines model for project_response.
type ProjectResponse struct {
	Project Project `json:"project"`
}

// ProjectUpdateRequest defines model for project_update_request.
type ProjectUpdateRequest struct {
	Description *string    `json:"description,omitempty" mapstructure:"description"`
	EndDate     *time.Time `json:"end_date,omitempty" mapstructure:"end_date"`
	ProjectId   int64      `json:"project_id" mapstructure:"project_id"`
	ProjectName *string    `json:"project_name,omitempty" mapstructure:"project_name"`
	StartDate   *time.Time `json:"start_date,omitempty" mapstructure:"start_date"`
	Status      *string    `json:"status,omitempty" mapstructure:"status"`
}

// ProjectUpdateResponse defines model for project_update_response.
type ProjectUpdateResponse struct {
	Project Project `json:"project"`
}

// ProjectsRequest defines model for projects_request.
type ProjectsRequest struct {
	ProjectIds []int64 `json:"project_ids" mapstructure:"project_ids"`
}

// ProjectsResponse defines model for projects_response.
type ProjectsResponse struct {
	Projects []Project `json:"projects" mapstructure:"projects"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xY226jQAz9F+8+gvKy2gd+ZbWKpoxDZ5W5rMdIrSr+vRoCYdKWWyhtWvGGOsPxsX3s",
	"0/AEudXOGjTsIXsCn9+jFvWjI/sPc24eHRIrrA9yQsEo96I+O1jS4QmkYExZaYQE+NEhZOCZlCkggYfU",
	"CqfS3Eos0KT4wCRSFkWNp4XzTGXOJYWXIviqSkCiz0k5VtaEy0uQY6gAjUbuA+tV0jiDh0hNLfdKXsRS",
	"hn//6uIow1ggzQwUYcehjNC4tGAXWAHcsyBer2YRfBONS780iQYlAJZOrqncCL4K4Qj/l4pQQvYn7tKL",
	"HiWx4i84/j3TsXf1KEbtPb2zDyHQvzGk32psNi2/1HKPuurkJsnGO2s8vtZNtPV/Eh4ggx+7ziJ2jT/s",
	"2ms9RAY5SDzikHQ/bFn2j+gk+n0l1Oi9KBYLtoV5xbM9GCKpUd8hfbZ3n1is0sgO+oP9lexxcWtrjFsy",
	"pK6aTYLXmVIDM+ZNmywGZTGrUXPaMbLzo6UxYfW3t/voNscT+I35wfeTy7QOzynd7XvR1t8r+nuzM3sy",
	"hG3Fr7ri5/ThNnXiv+x/+R3/aZWt/6QYtZ9b4zMJQSQer8y0JVENt8wP5vxVe/Wpv2bHNuH2/XL7frnq",
	"N5+R4ZjqECvOyCQXuFygYxJ7n60Zog7U1Y8lNVLS2Z7wPmn15/RWQuGqMgcLmSmPxwSsQyOcggwgASf4",
	"3p9OqucAAAD///csw4IrGgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
