// Package user provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package user

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// FullUser defines model for full_user.
type FullUser struct {
	CreatedAt time.Time           `json:"created_at" mapstructure:"created_at"`
	Email     openapi_types.Email `json:"email" mapstructure:"email"`
	FirstName string              `json:"first_name" mapstructure:"first_name"`
	LastName  string              `json:"last_name" mapstructure:"last_name"`
	UpdatedAt time.Time           `json:"updated_at" mapstructure:"updated_at"`
	UserId    int64               `json:"user_id" mapstructure:"user_id"`
}

// FullUserRequest defines model for full_user_request.
type FullUserRequest struct {
	UserId int64 `json:"user_id" mapstructure:"user_id"`
}

// FullUserResponse defines model for full_user_response.
type FullUserResponse struct {
	FullUser FullUser `json:"full_user"`
}

// FullUsersRequest defines model for full_users_request.
type FullUsersRequest struct {
	UserIds []int64 `json:"user_ids" mapstructure:"user_ids"`
}

// FullUsersResponse defines model for full_users_response.
type FullUsersResponse struct {
	FullUsers []FullUser `json:"full_users" mapstructure:"full_users"`
}

// User defines model for user.
type User struct {
	CreatedAt time.Time `json:"created_at" mapstructure:"created_at"`
	FirstName string    `json:"first_name" mapstructure:"first_name"`
	LastName  string    `json:"last_name" mapstructure:"last_name"`
	UpdatedAt time.Time `json:"updated_at" mapstructure:"updated_at"`
	UserId    int64     `json:"user_id" mapstructure:"user_id"`
}

// UserCreateRequest defines model for user_create_request.
type UserCreateRequest struct {
	Email     openapi_types.Email `json:"email" mapstructure:"email"`
	FirstName string              `json:"first_name" mapstructure:"first_name"`
	LastName  string              `json:"last_name" mapstructure:"last_name"`
	Password  *string             `json:"password,omitempty" mapstructure:"password"`
}

// UserCreateResponse defines model for user_create_response.
type UserCreateResponse struct {
	User User `json:"user"`
}

// UserCredentials defines model for user_credentials.
type UserCredentials struct {
	CreatedAt time.Time           `json:"created_at" mapstructure:"created_at"`
	Email     openapi_types.Email `json:"email" mapstructure:"email"`
	Password  *string             `json:"password,omitempty" mapstructure:"password"`
	UpdatedAt time.Time           `json:"updated_at" mapstructure:"updated_at"`
}

// UserCredentialsRequest defines model for user_credentials_request.
type UserCredentialsRequest struct {
	Email openapi_types.Email `json:"email" mapstructure:"email"`
}

// UserCredentialsResponse defines model for user_credentials_response.
type UserCredentialsResponse struct {
	UserCredentials UserCredentials `json:"user_credentials"`
}

// UserCredentialsUpdateRequest defines model for user_credentials_update_request.
type UserCredentialsUpdateRequest struct {
	Email    *openapi_types.Email `json:"email,omitempty" mapstructure:"email"`
	Password *string              `json:"password,omitempty" mapstructure:"password"`
	UserId   int64                `json:"user_id" mapstructure:"user_id"`
}

// UserCredentialsUpdateResponse defines model for user_credentials_update_response.
type UserCredentialsUpdateResponse struct {
	UserCredentials UserCredentials `json:"user_credentials"`
}

// UserDeleteRequest defines model for user_delete_request.
type UserDeleteRequest struct {
	UserId int64 `json:"user_id" mapstructure:"user_id"`
}

// UserDeleteResponse defines model for user_delete_response.
type UserDeleteResponse struct {
	Message string `json:"message" mapstructure:"message"`
}

// UserRequest defines model for user_request.
type UserRequest struct {
	UserId int64 `json:"user_id" mapstructure:"user_id"`
}

// UserResponse defines model for user_response.
type UserResponse struct {
	User User `json:"user"`
}

// UserUpdateRequest defines model for user_update_request.
type UserUpdateRequest struct {
	FirstName string `json:"first_name" mapstructure:"first_name"`
	LastName  string `json:"last_name" mapstructure:"last_name"`
	UserId    int64  `json:"user_id" mapstructure:"user_id"`
}

// UserUpdateResponse defines model for user_update_response.
type UserUpdateResponse struct {
	User User `json:"user"`
}

// UsersRequest defines model for users_request.
type UsersRequest struct {
	UserIds []int64 `json:"user_ids" mapstructure:"user_ids"`
}

// UsersResponse defines model for users_response.
type UsersResponse struct {
	Users []User `json:"users" mapstructure:"users"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYXW7bMAy+C7fHBH0Z9uBL7ADDEGg2k2qwJY2k0QaF7z7Iqf/iKHKaLnaKvtmW/JH6",
	"SH2U+AKpLZw1aIQheQFOH7FQ9eO2zPNNyUj+xZF1SKKxHkoJlWC2UVJPtFT4J8iU4Fp0gbAC2TuEBFhI",
	"mx2s4HltldPr1Ga4Q7PGZyG1FrWr8QrlWKhMpST/Uw++qlaAhdL5wNDhy3VGDhgef6uJZWNUgX7aNZg9",
	"JA+cq3fC7YA8bOmy/8l+D762xkgbnQ1MaSPfv3VmtBHcIV1q5xW48lYI/5aaMIPkZzswiEyfzVWbAL1M",
	"GfDyq/XN/v6DqYAPc5PPG28MWcZ5Pd9aYw6zs4Zx7PFgk34l3EICXx66Pf3wuqEfuonHLnQjZ53gKG31",
	"sxYseAqBVftFEan92wjlIKMcX02U0+GCJrJ71bJ6pqtgnE4vbQlK/amkd6eklyhoDXf4ISwGn9V6mGNO",
	"MT9ZGoa9/Thm5Ym04A+T7yERKvEy0y3uWD1ipbT9NR75kHBOqUMnS1Cw+jR2MzSiVc4f/Sg6V7LcVgqP",
	"oj/KwLepUpMjc0nTyVVNdPjcjjrO/9juGsw/WRH6EyY5eIjAfJo/47ZY1I0gHJgFJlCGOZ5LmgVS27oc",
	"orNAZrW7+oTQwIw8bAaCHt4Tmzc/KMRk6u6uJ8u7MMS5v23MP0RXItaQuKwX8Q5tiEAHItR88PO02VpI",
	"TJnnK7AOjXIaEqhPdfLIh5HqXwAAAP//AWxJY24WAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
