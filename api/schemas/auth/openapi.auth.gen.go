// Package auth provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package auth

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// RegisterUser defines model for RegisterUser.
type RegisterUser struct {
	Email     openapi_types.Email `json:"email" mapstructure:"email"`
	FirstName string              `json:"first_name" mapstructure:"first_name"`
	LastName  string              `json:"last_name" mapstructure:"last_name"`
	Password  string              `json:"password" mapstructure:"password"`
}

// AuthRequest defines model for auth_request.
type AuthRequest struct {
	Email    *openapi_types.Email `json:"email,omitempty" mapstructure:"email"`
	Password *string              `json:"password,omitempty" mapstructure:"password"`
}

// AuthResponse defines model for auth_response.
type AuthResponse struct {
	Token *string `json:"token,omitempty" mapstructure:"token"`
}

// LoginRequest defines model for login_request.
type LoginRequest struct {
	Email    openapi_types.Email `json:"email" mapstructure:"email"`
	Password string              `json:"password" mapstructure:"password"`
}

// LoginResponse defines model for login_response.
type LoginResponse struct {
	AccessToken  string  `json:"access_token" mapstructure:"access_token"`
	ExpiresIn    int32   `json:"expires_in" mapstructure:"expires_in"`
	RefreshToken *string `json:"refresh_token,omitempty" mapstructure:"refresh_token"`
	TokenType    string  `json:"token_type" mapstructure:"token_type"`
}

// LogoutResponse defines model for logout_response.
type LogoutResponse struct {
	Message string `json:"message" mapstructure:"message"`
}

// PasswordChangeRequest defines model for password_change_request.
type PasswordChangeRequest struct {
	CurrentPassword string `json:"current_password" mapstructure:"current_password"`
	NewPassword     string `json:"new_password" mapstructure:"new_password"`
}

// PasswordChangeResponse defines model for password_change_response.
type PasswordChangeResponse struct {
	Message string `json:"message" mapstructure:"message"`
}

// RefreshTokenRequest defines model for refresh_token_request.
type RefreshTokenRequest struct {
	RefreshToken string `json:"refresh_token" mapstructure:"refresh_token"`
}

// RefreshTokenResponse defines model for refresh_token_response.
type RefreshTokenResponse struct {
	AccessToken  string  `json:"access_token" mapstructure:"access_token"`
	ExpiresIn    int32   `json:"expires_in" mapstructure:"expires_in"`
	RefreshToken *string `json:"refresh_token,omitempty" mapstructure:"refresh_token"`
	TokenType    string  `json:"token_type" mapstructure:"token_type"`
}

// Token defines model for token.
type Token struct {
	Token *string `json:"token,omitempty" mapstructure:"token"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+yXz46bMBDG32XO5NLeuLWHHnrsH/VQrZDjDOAWbHdmrM0q4t0rQ0NwWFZbkWwjdW8G",
	"o998882MhQ+gXeudRSsM+QFY19iqfvkJK8OC9JWR4rMn55HEYL+LrTJNXJSOWiWQ/3mTgTx4hBxYyNgK",
	"MthvnPJmo90OK7Qb3Aupjaiqx7TKs1DQEghHRtdlUBpiKaxqMX62hjkhRXCjLsQ9gSLWK+Z7R7vEkvHl",
	"OldGTBcjEf4KhnAH+ffR80mgSbrTZO9GCW77A7VAl4EKUhcRhywvX+GpY5dzZylJ9s4yzrMU9xPtWgkD",
	"5PH4jauMvQ2X/2Ff3j3hzFJplNbIXFykQgkrqsW9N4RcGJs4Y6y8fXOyxVjBCulv3T+xB2NKQq4vk0gK",
	"6zsuroqBeYAdlio0MZX3qKiXvrqzB/isyImniY7E3oXSuyBP1L5FZlWtPqOPmJn248Zj4o5NW+ha2QqX",
	"Z1cHIrRSXHPGZjFiJhbvrxo04c+8m0k6E/Q8T2+x8slwLdf9qgN9Jjfdfo7o1+P0vztORyte9N+my4BR",
	"BzLy8DleG4ag296nd0Hq09OHYz98/PYFsuGSEUnbM09rET+EMrZ0kNvQNBk4j1Z5Azn0fxRS87DT/Q4A",
	"AP//UYxpYL0MAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
