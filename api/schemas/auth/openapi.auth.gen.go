// Package auth provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package auth

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// LoginRequest defines model for login_request.
type LoginRequest struct {
	MemberId int64  `json:"member_id" mapstructure:"member_id"`
	Password string `json:"password" mapstructure:"password"`
}

// LoginResponse defines model for login_response.
type LoginResponse struct {
	RefreshToken Token `json:"refresh_token"`
	Token        Token `json:"token"`
}

// LogoutRequest defines model for logout_request.
type LogoutRequest struct {
	MemberId int64 `json:"member_id" mapstructure:"member_id"`
}

// LogoutResponse defines model for logout_response.
type LogoutResponse struct {
	MemberId int64 `json:"member_id" mapstructure:"member_id"`
}

// MemberCredentials defines model for member_credentials.
type MemberCredentials struct {
	MemberId int64  `json:"member_id" mapstructure:"member_id"`
	Password string `json:"password" mapstructure:"password"`
}

// MemberCredentialsCreateRequest defines model for member_credentials_create_request.
type MemberCredentialsCreateRequest struct {
	MemberId int64  `json:"member_id" mapstructure:"member_id"`
	Password string `json:"password" mapstructure:"password"`
}

// MemberCredentialsCreateResponse defines model for member_credentials_create_response.
type MemberCredentialsCreateResponse struct {
	MemberId int64  `json:"member_id" mapstructure:"member_id"`
	Password string `json:"password" mapstructure:"password"`
}

// MemberCredentialsDeleteRequest defines model for member_credentials_delete_request.
type MemberCredentialsDeleteRequest struct {
	MemberId int64 `json:"member_id" mapstructure:"member_id"`
}

// MemberCredentialsDeleteResponse defines model for member_credentials_delete_response.
type MemberCredentialsDeleteResponse struct {
	MemberId int64 `json:"member_id" mapstructure:"member_id"`
}

// MemberCredentialsRequest defines model for member_credentials_request.
type MemberCredentialsRequest struct {
	MemberId int64  `json:"member_id" mapstructure:"member_id"`
	Password string `json:"password" mapstructure:"password"`
}

// MemberCredentialsResponse defines model for member_credentials_response.
type MemberCredentialsResponse struct {
	MemberId int64  `json:"member_id" mapstructure:"member_id"`
	Password string `json:"password" mapstructure:"password"`
}

// MemberCredentialsUpdateRequest defines model for member_credentials_update_request.
type MemberCredentialsUpdateRequest struct {
	MemberId int64  `json:"member_id" mapstructure:"member_id"`
	Password string `json:"password" mapstructure:"password"`
}

// MemberCredentialsUpdateResponse defines model for member_credentials_update_response.
type MemberCredentialsUpdateResponse struct {
	MemberId int64  `json:"member_id" mapstructure:"member_id"`
	Password string `json:"password" mapstructure:"password"`
}

// Token defines model for token.
type Token struct {
	Token string `json:"token" mapstructure:"token"`
}

// TokenRefreshRequest defines model for token_refresh_request.
type TokenRefreshRequest struct {
	Token string `json:"token" mapstructure:"token"`
}

// TokenRefreshResponse defines model for token_refresh_response.
type TokenRefreshResponse struct {
	Token string `json:"token" mapstructure:"token"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+yWwW6zMAzH38XfdwT1Mu3Aq0wTSuEPzQZJ5hitU8W7T4EWuq50q3ook7glTrD/+cUO",
	"3lFma2cNjHhKduSzDWrVDStbapMy3hp4CQbH1oFFo1uuUa/Bqc7DpLBcK6GEtJHHB4pIPhz6KUowRbSN",
	"rXI6zmyOEibGVljFosrel3JeuMmk4fDV6LptI3LK+3fLXZy9Wy+sTXml18FPG7yGc2lGTsnTUbyjaM/D",
	"Iez6BZlQGw1IvLPG4zsTRsHwm1TsK0ww/GcUlNC/1Uh5tUe86je1EV2z+0R5b41OAk9It43c/TonyV/U",
	"PMV7jqL3qxkjhxGtKr/UznkuYawEyxPzW0x3LoO5c8pRYQbpdONrMR7jb796S1n/yGep54uAGpcvv4cr",
	"MC3pNHIaeuqvKAbzLfIOrfjZXnxSTHro0SfzeR7iprLoHurCPm0KS4lpqioi62CU05RQd/+y8f1K+xkA",
	"AP//UkdO68cOAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
