// Package auth provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package auth

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/AgamBenItzhak/TaskTracker/api/schemas/auth"
	externalRef1 "github.com/AgamBenItzhak/TaskTracker/api/schemas/errors"
	externalRef2 "github.com/AgamBenItzhak/TaskTracker/api/schemas/member"
	externalRef3 "github.com/AgamBenItzhak/TaskTracker/api/schemas/project"
	externalRef4 "github.com/AgamBenItzhak/TaskTracker/api/schemas/task"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// LoginMemberJSONRequestBody defines body for LoginMember for application/json ContentType.
type LoginMemberJSONRequestBody = externalRef0.LoginRequest

// LogoutMemberJSONRequestBody defines body for LogoutMember for application/json ContentType.
type LogoutMemberJSONRequestBody = externalRef0.LogoutRequest

// UpdateMemberCredentialsByIDJSONRequestBody defines body for UpdateMemberCredentialsByID for application/json ContentType.
type UpdateMemberCredentialsByIDJSONRequestBody = externalRef0.MemberCredentialsUpdateRequest

// RefreshMemberTokenJSONRequestBody defines body for RefreshMemberToken for application/json ContentType.
type RefreshMemberTokenJSONRequestBody = externalRef0.TokenRefreshRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Log in a member
	// (POST /auth/login)
	LoginMember(w http.ResponseWriter, r *http.Request)
	// Log out a member
	// (POST /auth/logout)
	LogoutMember(w http.ResponseWriter, r *http.Request)
	// Reset a member's password
	// (POST /auth/password/reset)
	UpdateMemberCredentialsByID(w http.ResponseWriter, r *http.Request)
	// Refresh a member's token
	// (POST /auth/refresh)
	RefreshMemberToken(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Log in a member
// (POST /auth/login)
func (_ Unimplemented) LoginMember(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Log out a member
// (POST /auth/logout)
func (_ Unimplemented) LogoutMember(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Reset a member's password
// (POST /auth/password/reset)
func (_ Unimplemented) UpdateMemberCredentialsByID(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Refresh a member's token
// (POST /auth/refresh)
func (_ Unimplemented) RefreshMemberToken(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// LoginMember operation middleware
func (siw *ServerInterfaceWrapper) LoginMember(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LoginMember(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// LogoutMember operation middleware
func (siw *ServerInterfaceWrapper) LogoutMember(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LogoutMember(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateMemberCredentialsByID operation middleware
func (siw *ServerInterfaceWrapper) UpdateMemberCredentialsByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateMemberCredentialsByID(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RefreshMemberToken operation middleware
func (siw *ServerInterfaceWrapper) RefreshMemberToken(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RefreshMemberToken(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/login", wrapper.LoginMember)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/logout", wrapper.LogoutMember)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/password/reset", wrapper.UpdateMemberCredentialsByID)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/refresh", wrapper.RefreshMemberToken)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+yWz2/bOgzH/xVB7wHv4sR5XTEUvrXbJcAGFEV2KopAtRlbjS1qEr02KPy/D5Icx03j",
	"JsX667BbIlEk9fnSpO55ipVGBYosT+65TQuohP9ZYi7V3MDPGiy5BW1QgyEJfruC6hrMXGbuzwJNJYgn",
	"XCr6fMwjTisN4S/kYHjE70YotBylmEEOagR3ZMSIRB58CW3J1CnVxp3auG6aiGth7S0aH6d1a8lIlT/T",
	"a+encV7dvaSBjCeXvXi9aFfdJfD6BlLiTdQhsRqVhcdMDCwM2GJOuATlFv41sOAJ/yfeUI5bxHEwaiL+",
	"HOutzMNqtBV4IHWs6d3lHCT/ZM5DvD9i0u1uaiADRVKUdl7rTBD8/ZQOxfTOcn8oTl1zeIiiW/6T9NY9",
	"ZWdTGUxmvm42g/X8MZIbqqL3yM7ZSbVA5ykDmxqpSaLiCT89n7IFGjYTdjkzIl2CiZhg2qA7ySqhRA4V",
	"KGJCZYyEXTJyZlLlzK4sQTV2tS+pdPF6Xtjp+ZRH/BcYGyJNxv+PJw4UalBCS57wT+PJ+MhXIBX+lrGo",
	"qYj9mPPgMMjr8AmX8DTjCf/mtr/7Aubh+mDpDLOVM01RESh/SmhdytSfi28sqs37Yt+we/j02KJMpga/",
	"EAT2eR9NJi8evK0fH/2hZrMCWPiA/7NsM5htXVXCrAIhJhUTrZXf7dBiTU+yxZpeG27/JXAQ3eOXj34I",
	"XlYIy64BFCsxzyFjjt1j1FjTLtbrvhobsPAE8x9+7gTmXzbz6Gw1/fpKEux/I7yxKgdM433fwZr2RrOA",
	"vYn4cch0UOUMwTKFxOBO2m2BL5yXTt5eoJ7SbdMflvgiGASNZ92j+eWV3T0h37iDDUzCfQoquN3ZzVp4",
	"fQ1648+CcTOGJ5f3vDYlT3hBpJM4LjEVZYGWkpPJySR2E6e5an4HAAD//16hhDZxDgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../schemas/auth.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(pathPrefix, "../schemas/errors.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef2.PathToRawSpec(path.Join(pathPrefix, "../schemas/member.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef3.PathToRawSpec(path.Join(pathPrefix, "../schemas/project.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef4.PathToRawSpec(path.Join(pathPrefix, "../schemas/task.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
