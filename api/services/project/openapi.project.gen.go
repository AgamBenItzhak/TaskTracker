// Package project provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package project

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/AgamBenItzhak/TaskTracker/api/schemas/auth"
	externalRef1 "github.com/AgamBenItzhak/TaskTracker/api/schemas/errors"
	externalRef2 "github.com/AgamBenItzhak/TaskTracker/api/schemas/project"
	externalRef3 "github.com/AgamBenItzhak/TaskTracker/api/schemas/task"
	externalRef4 "github.com/AgamBenItzhak/TaskTracker/api/schemas/user"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// CreateProjectJSONRequestBody defines body for CreateProject for application/json ContentType.
type CreateProjectJSONRequestBody = externalRef2.Project

// PatchProjectByIDJSONRequestBody defines body for PatchProjectByID for application/json ContentType.
type PatchProjectByIDJSONRequestBody = externalRef2.Project

// UpdateProjectByIDJSONRequestBody defines body for UpdateProjectByID for application/json ContentType.
type UpdateProjectByIDJSONRequestBody = externalRef2.Project

// CreateTaskForProjectJSONRequestBody defines body for CreateTaskForProject for application/json ContentType.
type CreateTaskForProjectJSONRequestBody = externalRef3.Task

// PatchTaskByIDForProjectJSONRequestBody defines body for PatchTaskByIDForProject for application/json ContentType.
type PatchTaskByIDForProjectJSONRequestBody = externalRef3.Task

// UpdateTaskByIDForProjectJSONRequestBody defines body for UpdateTaskByIDForProject for application/json ContentType.
type UpdateTaskByIDForProjectJSONRequestBody = externalRef3.Task

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all projects
	// (GET /project)
	GetAllProjects(w http.ResponseWriter, r *http.Request)
	// Create a new project
	// (POST /project)
	CreateProject(w http.ResponseWriter, r *http.Request)
	// Delete a project by ID
	// (DELETE /project/{project_id})
	DeleteProjectByID(w http.ResponseWriter, r *http.Request, projectId int)
	// Get a project by ID
	// (GET /project/{project_id})
	GetProjectByID(w http.ResponseWriter, r *http.Request, projectId int)
	// Partially update a project by ID
	// (PATCH /project/{project_id})
	PatchProjectByID(w http.ResponseWriter, r *http.Request, projectId int)
	// Update a project by ID
	// (PUT /project/{project_id})
	UpdateProjectByID(w http.ResponseWriter, r *http.Request, projectId int)
	// Get all tasks for a project
	// (GET /project/{project_id}/tasks)
	GetAllTasksForProject(w http.ResponseWriter, r *http.Request, projectId int)
	// Create a new task for a project
	// (POST /project/{project_id}/tasks)
	CreateTaskForProject(w http.ResponseWriter, r *http.Request, projectId int)
	// Delete a task by ID for a project
	// (DELETE /project/{project_id}/tasks/{task_id})
	DeleteTaskByIDForProject(w http.ResponseWriter, r *http.Request, projectId int, taskId int)
	// Get a task by ID for a project
	// (GET /project/{project_id}/tasks/{task_id})
	GetTaskByIDForProject(w http.ResponseWriter, r *http.Request, projectId int, taskId int)
	// Partially update a task by ID for a project
	// (PATCH /project/{project_id}/tasks/{task_id})
	PatchTaskByIDForProject(w http.ResponseWriter, r *http.Request, projectId int, taskId int)
	// Update a task by ID for a project
	// (PUT /project/{project_id}/tasks/{task_id})
	UpdateTaskByIDForProject(w http.ResponseWriter, r *http.Request, projectId int, taskId int)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get all projects
// (GET /project)
func (_ Unimplemented) GetAllProjects(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new project
// (POST /project)
func (_ Unimplemented) CreateProject(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a project by ID
// (DELETE /project/{project_id})
func (_ Unimplemented) DeleteProjectByID(w http.ResponseWriter, r *http.Request, projectId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a project by ID
// (GET /project/{project_id})
func (_ Unimplemented) GetProjectByID(w http.ResponseWriter, r *http.Request, projectId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Partially update a project by ID
// (PATCH /project/{project_id})
func (_ Unimplemented) PatchProjectByID(w http.ResponseWriter, r *http.Request, projectId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a project by ID
// (PUT /project/{project_id})
func (_ Unimplemented) UpdateProjectByID(w http.ResponseWriter, r *http.Request, projectId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all tasks for a project
// (GET /project/{project_id}/tasks)
func (_ Unimplemented) GetAllTasksForProject(w http.ResponseWriter, r *http.Request, projectId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new task for a project
// (POST /project/{project_id}/tasks)
func (_ Unimplemented) CreateTaskForProject(w http.ResponseWriter, r *http.Request, projectId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a task by ID for a project
// (DELETE /project/{project_id}/tasks/{task_id})
func (_ Unimplemented) DeleteTaskByIDForProject(w http.ResponseWriter, r *http.Request, projectId int, taskId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a task by ID for a project
// (GET /project/{project_id}/tasks/{task_id})
func (_ Unimplemented) GetTaskByIDForProject(w http.ResponseWriter, r *http.Request, projectId int, taskId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Partially update a task by ID for a project
// (PATCH /project/{project_id}/tasks/{task_id})
func (_ Unimplemented) PatchTaskByIDForProject(w http.ResponseWriter, r *http.Request, projectId int, taskId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a task by ID for a project
// (PUT /project/{project_id}/tasks/{task_id})
func (_ Unimplemented) UpdateTaskByIDForProject(w http.ResponseWriter, r *http.Request, projectId int, taskId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAllProjects operation middleware
func (siw *ServerInterfaceWrapper) GetAllProjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllProjects(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateProject operation middleware
func (siw *ServerInterfaceWrapper) CreateProject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProject(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteProjectByID operation middleware
func (siw *ServerInterfaceWrapper) DeleteProjectByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProjectByID(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetProjectByID operation middleware
func (siw *ServerInterfaceWrapper) GetProjectByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProjectByID(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PatchProjectByID operation middleware
func (siw *ServerInterfaceWrapper) PatchProjectByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchProjectByID(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateProjectByID operation middleware
func (siw *ServerInterfaceWrapper) UpdateProjectByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateProjectByID(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAllTasksForProject operation middleware
func (siw *ServerInterfaceWrapper) GetAllTasksForProject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllTasksForProject(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateTaskForProject operation middleware
func (siw *ServerInterfaceWrapper) CreateTaskForProject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTaskForProject(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteTaskByIDForProject operation middleware
func (siw *ServerInterfaceWrapper) DeleteTaskByIDForProject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "task_id" -------------
	var taskId int

	err = runtime.BindStyledParameterWithOptions("simple", "task_id", chi.URLParam(r, "task_id"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "task_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTaskByIDForProject(w, r, projectId, taskId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTaskByIDForProject operation middleware
func (siw *ServerInterfaceWrapper) GetTaskByIDForProject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "task_id" -------------
	var taskId int

	err = runtime.BindStyledParameterWithOptions("simple", "task_id", chi.URLParam(r, "task_id"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "task_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTaskByIDForProject(w, r, projectId, taskId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PatchTaskByIDForProject operation middleware
func (siw *ServerInterfaceWrapper) PatchTaskByIDForProject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "task_id" -------------
	var taskId int

	err = runtime.BindStyledParameterWithOptions("simple", "task_id", chi.URLParam(r, "task_id"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "task_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchTaskByIDForProject(w, r, projectId, taskId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateTaskByIDForProject operation middleware
func (siw *ServerInterfaceWrapper) UpdateTaskByIDForProject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "task_id" -------------
	var taskId int

	err = runtime.BindStyledParameterWithOptions("simple", "task_id", chi.URLParam(r, "task_id"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "task_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateTaskByIDForProject(w, r, projectId, taskId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/project", wrapper.GetAllProjects)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/project", wrapper.CreateProject)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/project/{project_id}", wrapper.DeleteProjectByID)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/project/{project_id}", wrapper.GetProjectByID)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/project/{project_id}", wrapper.PatchProjectByID)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/project/{project_id}", wrapper.UpdateProjectByID)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/project/{project_id}/tasks", wrapper.GetAllTasksForProject)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/project/{project_id}/tasks", wrapper.CreateTaskForProject)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/project/{project_id}/tasks/{task_id}", wrapper.DeleteTaskByIDForProject)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/project/{project_id}/tasks/{task_id}", wrapper.GetTaskByIDForProject)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/project/{project_id}/tasks/{task_id}", wrapper.PatchTaskByIDForProject)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/project/{project_id}/tasks/{task_id}", wrapper.UpdateTaskByIDForProject)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXwW7bOBD9FYK7R9lyu8Gi0C3dYBe++ZCciiBgpbHNRiK55KitYOjfF6Qom4ptJU4k",
	"e1HkZMEiZzhv3jw+bWgqCyUFCDQ02VCTrqFg7lFp+Q1S9I8KNHJwL1INDCF7YO7dUurCPtGMIUyQF0Aj",
	"ipUCmlCDmosVjejPiWSKT1KZwQrEBH6iZhNkKxevYMqgLlMstd0UhK/riGZgUs0Vcins4rdEDkPZ0CCy",
	"B3vqUcrYBreZPJYPPOvk4gL/vNrl4QJhBfrEREHsMJVgBbwVsE4sG9wg0zgeZkF4nw1L89YifBQbsFTZ",
	"mMwNwtc2nYZ/S64ho8mXsEtPehSFjO+c8X57HPnVjWIdUWTm8X0kBxlJLjXH6u0z4uP8AvNhyTWKRrWB",
	"t0mGUKddoDaseVhpWarRSgjiX1hOWkD36g7xPUVZbAIultKeozPf9HoxJ0upyS0zj7eapY+gI8KI1zBS",
	"MMFWUIBAwkRGbHaCdhkXK2Iqg1BM7ak45jZfEIVcL+Y0ot9BmybTbPphOrMiJxUIpjhN6B/T2fSjVUyG",
	"a4dRHNiSFbgfK4TMHnae0YT+A3id54tmlaEWNqOkMI1QfpzNnF5KgSDcbqZUzlO3P/5mGkVrXJB94giF",
	"2/i7hiVN6G/xzi/F3ixtj1RvUWVas6oB9QmYJOcGiVy2+DWDZ8qiYLpqjk9YngevI6qkOVDoX663vlDa",
	"0AMMfpZZdVKJL6qsyz/UJdR7yH4YJ20XwNs1EAE/8op4bpPd4hDHBh3C7OLOkjZ4vNldyXXD+hwa3e7i",
	"fOP+9zh/ruY3jo6aFYCgDU2+bA4ccX5je4xr2M4JSuIz2EGzFwfDNY1oo4Rdf9BFOgpQeyJhdX2/14ar",
	"/RH2h/cHyIgp0xSMWZZ5XlmCXfVtEhLJUpYie4Jwg0ugBF8rMr+x4Y7N5RAY2tgjAzg7F4/bsn5wXLs6",
	"jYKULzlkDsh9XdiHWjFM1/tgL+zfQ8Dd3BkjIH5hrTpbj/2lS4I74lXTtmAaOcvzykc8SIbywNzdueXv",
	"XPiFuHB3hAHHbrfYecRnHJM1ZuZvqXeG4tUC7Uygsabx/yXVLzJz7gP7JCe3rTaE4oit261lIQ36HJ5t",
	"zAB9SVtD5Bz6OL0ZfpCbbpzXfe5yPmc9/cqjvrOFOmx2/5DGG/9l9wJLaolhBX0AcjSJ3L/j0CPqP0rz",
	"1djvkHefvEPbYwvkad7Y7XjWGLuqnDbvT/wxJR6wqU6JL93Ro359oHbOzjL2rpqX2/S+xvc59gGb713i",
	"xfvfZxpfT4FLXjTnYVzrFVs7croMHfhi6OXl8Y+Hd1q+03IwWt49T0a3AfT3llulzmlC14gqieNcpixf",
	"S4PJp9mnWcwUp/V9/V8AAAD//7OGFELIHgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../schemas/auth.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(pathPrefix, "../schemas/errors.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef2.PathToRawSpec(path.Join(pathPrefix, "../schemas/project.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef3.PathToRawSpec(path.Join(pathPrefix, "../schemas/task.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef4.PathToRawSpec(path.Join(pathPrefix, "../schemas/user.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
