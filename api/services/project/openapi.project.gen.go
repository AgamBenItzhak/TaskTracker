// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all projects
	// (GET /projects)
	GetProjects(w http.ResponseWriter, r *http.Request)
	// Create a new project
	// (POST /projects)
	PostProjects(w http.ResponseWriter, r *http.Request)
	// Delete project by ID
	// (DELETE /projects/{project_id})
	DeleteProjectsProjectId(w http.ResponseWriter, r *http.Request, projectId int64)
	// Get project by ID
	// (GET /projects/{project_id})
	GetProjectsProjectId(w http.ResponseWriter, r *http.Request, projectId int64)
	// Update project by ID
	// (PUT /projects/{project_id})
	PutProjectsProjectId(w http.ResponseWriter, r *http.Request, projectId int64)
	// Get all task groups in project
	// (GET /projects/{project_id}/task-groups)
	GetProjectsProjectIdTaskGroups(w http.ResponseWriter, r *http.Request, projectId int64)
	// Create a new task group in project
	// (POST /projects/{project_id}/task-groups)
	PostProjectsProjectIdTaskGroups(w http.ResponseWriter, r *http.Request, projectId int64)
	// Delete task group by ID
	// (DELETE /projects/{project_id}/task-groups/{task_group_id})
	DeleteProjectsProjectIdTaskGroupsTaskGroupId(w http.ResponseWriter, r *http.Request, projectId int64, taskGroupId int64)
	// Get task group by ID
	// (GET /projects/{project_id}/task-groups/{task_group_id})
	GetProjectsProjectIdTaskGroupsTaskGroupId(w http.ResponseWriter, r *http.Request, projectId int64, taskGroupId int64)
	// Update task group by ID
	// (PUT /projects/{project_id}/task-groups/{task_group_id})
	PutProjectsProjectIdTaskGroupsTaskGroupId(w http.ResponseWriter, r *http.Request, projectId int64, taskGroupId int64)
	// Get all tasks in task group
	// (GET /projects/{project_id}/task-groups/{task_group_id}/tasks)
	GetProjectsProjectIdTaskGroupsTaskGroupIdTasks(w http.ResponseWriter, r *http.Request, projectId int64, taskGroupId int64)
	// Create a new task in task group
	// (POST /projects/{project_id}/task-groups/{task_group_id}/tasks)
	PostProjectsProjectIdTaskGroupsTaskGroupIdTasks(w http.ResponseWriter, r *http.Request, projectId int64, taskGroupId int64)
	// Delete task by ID
	// (DELETE /projects/{project_id}/task-groups/{task_group_id}/tasks/{task_id})
	DeleteProjectsProjectIdTaskGroupsTaskGroupIdTasksTaskId(w http.ResponseWriter, r *http.Request, projectId int64, taskGroupId int64, taskId int64)
	// Get task by ID
	// (GET /projects/{project_id}/task-groups/{task_group_id}/tasks/{task_id})
	GetProjectsProjectIdTaskGroupsTaskGroupIdTasksTaskId(w http.ResponseWriter, r *http.Request, projectId int64, taskGroupId int64, taskId int64)
	// Update task by ID
	// (PUT /projects/{project_id}/task-groups/{task_group_id}/tasks/{task_id})
	PutProjectsProjectIdTaskGroupsTaskGroupIdTasksTaskId(w http.ResponseWriter, r *http.Request, projectId int64, taskGroupId int64, taskId int64)
	// Get all users in project
	// (GET /projects/{project_id}/users)
	GetProjectsProjectIdUsers(w http.ResponseWriter, r *http.Request, projectId int64)
	// Add user to project
	// (POST /projects/{project_id}/users)
	PostProjectsProjectIdUsers(w http.ResponseWriter, r *http.Request, projectId int64)
	// Remove user from project
	// (DELETE /projects/{project_id}/users/{user_id})
	DeleteProjectsProjectIdUsersUserId(w http.ResponseWriter, r *http.Request, projectId int64, userId int64)
	// Update user role in project
	// (PUT /projects/{project_id}/users/{user_id})
	PutProjectsProjectIdUsersUserId(w http.ResponseWriter, r *http.Request, projectId int64, userId int64)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get all projects
// (GET /projects)
func (_ Unimplemented) GetProjects(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new project
// (POST /projects)
func (_ Unimplemented) PostProjects(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete project by ID
// (DELETE /projects/{project_id})
func (_ Unimplemented) DeleteProjectsProjectId(w http.ResponseWriter, r *http.Request, projectId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get project by ID
// (GET /projects/{project_id})
func (_ Unimplemented) GetProjectsProjectId(w http.ResponseWriter, r *http.Request, projectId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update project by ID
// (PUT /projects/{project_id})
func (_ Unimplemented) PutProjectsProjectId(w http.ResponseWriter, r *http.Request, projectId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all task groups in project
// (GET /projects/{project_id}/task-groups)
func (_ Unimplemented) GetProjectsProjectIdTaskGroups(w http.ResponseWriter, r *http.Request, projectId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new task group in project
// (POST /projects/{project_id}/task-groups)
func (_ Unimplemented) PostProjectsProjectIdTaskGroups(w http.ResponseWriter, r *http.Request, projectId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete task group by ID
// (DELETE /projects/{project_id}/task-groups/{task_group_id})
func (_ Unimplemented) DeleteProjectsProjectIdTaskGroupsTaskGroupId(w http.ResponseWriter, r *http.Request, projectId int64, taskGroupId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get task group by ID
// (GET /projects/{project_id}/task-groups/{task_group_id})
func (_ Unimplemented) GetProjectsProjectIdTaskGroupsTaskGroupId(w http.ResponseWriter, r *http.Request, projectId int64, taskGroupId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update task group by ID
// (PUT /projects/{project_id}/task-groups/{task_group_id})
func (_ Unimplemented) PutProjectsProjectIdTaskGroupsTaskGroupId(w http.ResponseWriter, r *http.Request, projectId int64, taskGroupId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all tasks in task group
// (GET /projects/{project_id}/task-groups/{task_group_id}/tasks)
func (_ Unimplemented) GetProjectsProjectIdTaskGroupsTaskGroupIdTasks(w http.ResponseWriter, r *http.Request, projectId int64, taskGroupId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new task in task group
// (POST /projects/{project_id}/task-groups/{task_group_id}/tasks)
func (_ Unimplemented) PostProjectsProjectIdTaskGroupsTaskGroupIdTasks(w http.ResponseWriter, r *http.Request, projectId int64, taskGroupId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete task by ID
// (DELETE /projects/{project_id}/task-groups/{task_group_id}/tasks/{task_id})
func (_ Unimplemented) DeleteProjectsProjectIdTaskGroupsTaskGroupIdTasksTaskId(w http.ResponseWriter, r *http.Request, projectId int64, taskGroupId int64, taskId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get task by ID
// (GET /projects/{project_id}/task-groups/{task_group_id}/tasks/{task_id})
func (_ Unimplemented) GetProjectsProjectIdTaskGroupsTaskGroupIdTasksTaskId(w http.ResponseWriter, r *http.Request, projectId int64, taskGroupId int64, taskId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update task by ID
// (PUT /projects/{project_id}/task-groups/{task_group_id}/tasks/{task_id})
func (_ Unimplemented) PutProjectsProjectIdTaskGroupsTaskGroupIdTasksTaskId(w http.ResponseWriter, r *http.Request, projectId int64, taskGroupId int64, taskId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all users in project
// (GET /projects/{project_id}/users)
func (_ Unimplemented) GetProjectsProjectIdUsers(w http.ResponseWriter, r *http.Request, projectId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add user to project
// (POST /projects/{project_id}/users)
func (_ Unimplemented) PostProjectsProjectIdUsers(w http.ResponseWriter, r *http.Request, projectId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Remove user from project
// (DELETE /projects/{project_id}/users/{user_id})
func (_ Unimplemented) DeleteProjectsProjectIdUsersUserId(w http.ResponseWriter, r *http.Request, projectId int64, userId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update user role in project
// (PUT /projects/{project_id}/users/{user_id})
func (_ Unimplemented) PutProjectsProjectIdUsersUserId(w http.ResponseWriter, r *http.Request, projectId int64, userId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetProjects operation middleware
func (siw *ServerInterfaceWrapper) GetProjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProjects(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostProjects operation middleware
func (siw *ServerInterfaceWrapper) PostProjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostProjects(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteProjectsProjectId operation middleware
func (siw *ServerInterfaceWrapper) DeleteProjectsProjectId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProjectsProjectId(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetProjectsProjectId operation middleware
func (siw *ServerInterfaceWrapper) GetProjectsProjectId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProjectsProjectId(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutProjectsProjectId operation middleware
func (siw *ServerInterfaceWrapper) PutProjectsProjectId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutProjectsProjectId(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetProjectsProjectIdTaskGroups operation middleware
func (siw *ServerInterfaceWrapper) GetProjectsProjectIdTaskGroups(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProjectsProjectIdTaskGroups(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostProjectsProjectIdTaskGroups operation middleware
func (siw *ServerInterfaceWrapper) PostProjectsProjectIdTaskGroups(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostProjectsProjectIdTaskGroups(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteProjectsProjectIdTaskGroupsTaskGroupId operation middleware
func (siw *ServerInterfaceWrapper) DeleteProjectsProjectIdTaskGroupsTaskGroupId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "task_group_id" -------------
	var taskGroupId int64

	err = runtime.BindStyledParameterWithOptions("simple", "task_group_id", chi.URLParam(r, "task_group_id"), &taskGroupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "task_group_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProjectsProjectIdTaskGroupsTaskGroupId(w, r, projectId, taskGroupId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetProjectsProjectIdTaskGroupsTaskGroupId operation middleware
func (siw *ServerInterfaceWrapper) GetProjectsProjectIdTaskGroupsTaskGroupId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "task_group_id" -------------
	var taskGroupId int64

	err = runtime.BindStyledParameterWithOptions("simple", "task_group_id", chi.URLParam(r, "task_group_id"), &taskGroupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "task_group_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProjectsProjectIdTaskGroupsTaskGroupId(w, r, projectId, taskGroupId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutProjectsProjectIdTaskGroupsTaskGroupId operation middleware
func (siw *ServerInterfaceWrapper) PutProjectsProjectIdTaskGroupsTaskGroupId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "task_group_id" -------------
	var taskGroupId int64

	err = runtime.BindStyledParameterWithOptions("simple", "task_group_id", chi.URLParam(r, "task_group_id"), &taskGroupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "task_group_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutProjectsProjectIdTaskGroupsTaskGroupId(w, r, projectId, taskGroupId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetProjectsProjectIdTaskGroupsTaskGroupIdTasks operation middleware
func (siw *ServerInterfaceWrapper) GetProjectsProjectIdTaskGroupsTaskGroupIdTasks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "task_group_id" -------------
	var taskGroupId int64

	err = runtime.BindStyledParameterWithOptions("simple", "task_group_id", chi.URLParam(r, "task_group_id"), &taskGroupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "task_group_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProjectsProjectIdTaskGroupsTaskGroupIdTasks(w, r, projectId, taskGroupId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostProjectsProjectIdTaskGroupsTaskGroupIdTasks operation middleware
func (siw *ServerInterfaceWrapper) PostProjectsProjectIdTaskGroupsTaskGroupIdTasks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "task_group_id" -------------
	var taskGroupId int64

	err = runtime.BindStyledParameterWithOptions("simple", "task_group_id", chi.URLParam(r, "task_group_id"), &taskGroupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "task_group_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostProjectsProjectIdTaskGroupsTaskGroupIdTasks(w, r, projectId, taskGroupId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteProjectsProjectIdTaskGroupsTaskGroupIdTasksTaskId operation middleware
func (siw *ServerInterfaceWrapper) DeleteProjectsProjectIdTaskGroupsTaskGroupIdTasksTaskId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "task_group_id" -------------
	var taskGroupId int64

	err = runtime.BindStyledParameterWithOptions("simple", "task_group_id", chi.URLParam(r, "task_group_id"), &taskGroupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "task_group_id", Err: err})
		return
	}

	// ------------- Path parameter "task_id" -------------
	var taskId int64

	err = runtime.BindStyledParameterWithOptions("simple", "task_id", chi.URLParam(r, "task_id"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "task_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProjectsProjectIdTaskGroupsTaskGroupIdTasksTaskId(w, r, projectId, taskGroupId, taskId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetProjectsProjectIdTaskGroupsTaskGroupIdTasksTaskId operation middleware
func (siw *ServerInterfaceWrapper) GetProjectsProjectIdTaskGroupsTaskGroupIdTasksTaskId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "task_group_id" -------------
	var taskGroupId int64

	err = runtime.BindStyledParameterWithOptions("simple", "task_group_id", chi.URLParam(r, "task_group_id"), &taskGroupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "task_group_id", Err: err})
		return
	}

	// ------------- Path parameter "task_id" -------------
	var taskId int64

	err = runtime.BindStyledParameterWithOptions("simple", "task_id", chi.URLParam(r, "task_id"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "task_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProjectsProjectIdTaskGroupsTaskGroupIdTasksTaskId(w, r, projectId, taskGroupId, taskId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutProjectsProjectIdTaskGroupsTaskGroupIdTasksTaskId operation middleware
func (siw *ServerInterfaceWrapper) PutProjectsProjectIdTaskGroupsTaskGroupIdTasksTaskId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "task_group_id" -------------
	var taskGroupId int64

	err = runtime.BindStyledParameterWithOptions("simple", "task_group_id", chi.URLParam(r, "task_group_id"), &taskGroupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "task_group_id", Err: err})
		return
	}

	// ------------- Path parameter "task_id" -------------
	var taskId int64

	err = runtime.BindStyledParameterWithOptions("simple", "task_id", chi.URLParam(r, "task_id"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "task_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutProjectsProjectIdTaskGroupsTaskGroupIdTasksTaskId(w, r, projectId, taskGroupId, taskId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetProjectsProjectIdUsers operation middleware
func (siw *ServerInterfaceWrapper) GetProjectsProjectIdUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProjectsProjectIdUsers(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostProjectsProjectIdUsers operation middleware
func (siw *ServerInterfaceWrapper) PostProjectsProjectIdUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostProjectsProjectIdUsers(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteProjectsProjectIdUsersUserId operation middleware
func (siw *ServerInterfaceWrapper) DeleteProjectsProjectIdUsersUserId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "user_id" -------------
	var userId int64

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProjectsProjectIdUsersUserId(w, r, projectId, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutProjectsProjectIdUsersUserId operation middleware
func (siw *ServerInterfaceWrapper) PutProjectsProjectIdUsersUserId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "user_id" -------------
	var userId int64

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutProjectsProjectIdUsersUserId(w, r, projectId, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects", wrapper.GetProjects)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects", wrapper.PostProjects)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/projects/{project_id}", wrapper.DeleteProjectsProjectId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}", wrapper.GetProjectsProjectId)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/projects/{project_id}", wrapper.PutProjectsProjectId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/task-groups", wrapper.GetProjectsProjectIdTaskGroups)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects/{project_id}/task-groups", wrapper.PostProjectsProjectIdTaskGroups)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/projects/{project_id}/task-groups/{task_group_id}", wrapper.DeleteProjectsProjectIdTaskGroupsTaskGroupId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/task-groups/{task_group_id}", wrapper.GetProjectsProjectIdTaskGroupsTaskGroupId)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/projects/{project_id}/task-groups/{task_group_id}", wrapper.PutProjectsProjectIdTaskGroupsTaskGroupId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/task-groups/{task_group_id}/tasks", wrapper.GetProjectsProjectIdTaskGroupsTaskGroupIdTasks)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects/{project_id}/task-groups/{task_group_id}/tasks", wrapper.PostProjectsProjectIdTaskGroupsTaskGroupIdTasks)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/projects/{project_id}/task-groups/{task_group_id}/tasks/{task_id}", wrapper.DeleteProjectsProjectIdTaskGroupsTaskGroupIdTasksTaskId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/task-groups/{task_group_id}/tasks/{task_id}", wrapper.GetProjectsProjectIdTaskGroupsTaskGroupIdTasksTaskId)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/projects/{project_id}/task-groups/{task_group_id}/tasks/{task_id}", wrapper.PutProjectsProjectIdTaskGroupsTaskGroupIdTasksTaskId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{project_id}/users", wrapper.GetProjectsProjectIdUsers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects/{project_id}/users", wrapper.PostProjectsProjectIdUsers)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/projects/{project_id}/users/{user_id}", wrapper.DeleteProjectsProjectIdUsersUserId)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/projects/{project_id}/users/{user_id}", wrapper.PutProjectsProjectIdUsersUserId)
	})

	return r
}
