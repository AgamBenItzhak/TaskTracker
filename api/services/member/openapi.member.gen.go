// Package member provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package member

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/AgamBenItzhak/TaskTracker/api/schemas/auth"
	externalRef1 "github.com/AgamBenItzhak/TaskTracker/api/schemas/errors"
	externalRef2 "github.com/AgamBenItzhak/TaskTracker/api/schemas/member"
	externalRef3 "github.com/AgamBenItzhak/TaskTracker/api/schemas/project"
	externalRef4 "github.com/AgamBenItzhak/TaskTracker/api/schemas/task"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// CreateMemberJSONRequestBody defines body for CreateMember for application/json ContentType.
type CreateMemberJSONRequestBody = externalRef2.MemberCreateRequest

// UpdateMemberByIDJSONRequestBody defines body for UpdateMemberByID for application/json ContentType.
type UpdateMemberByIDJSONRequestBody = externalRef2.MemberUpdateRequest

// UpdateMemberCredentialsByIDJSONRequestBody defines body for UpdateMemberCredentialsByID for application/json ContentType.
type UpdateMemberCredentialsByIDJSONRequestBody = externalRef0.MemberCredentialsUpdateRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all members
	// (GET /member)
	GetAllMembers(w http.ResponseWriter, r *http.Request)
	// Create a new member
	// (POST /member)
	CreateMember(w http.ResponseWriter, r *http.Request)
	// Delete a member by ID
	// (DELETE /member/{member_id})
	DeleteMemberByID(w http.ResponseWriter, r *http.Request, memberId int)
	// Get a member by ID
	// (GET /member/{member_id})
	GetMemberByID(w http.ResponseWriter, r *http.Request, memberId int)
	// Update a member by ID
	// (PUT /member/{member_id})
	UpdateMemberByID(w http.ResponseWriter, r *http.Request, memberId int)
	// Delete a member's credentials by ID
	// (DELETE /member/{member_id}/Credentials)
	DeleteMemberCredentialsByID(w http.ResponseWriter, r *http.Request, memberId int)
	// Get a member's credentials by ID
	// (GET /member/{member_id}/Credentials)
	GetMemberCredentialsByID(w http.ResponseWriter, r *http.Request, memberId int)
	// Update a member's credentials by ID
	// (PUT /member/{member_id}/Credentials)
	UpdateMemberCredentialsByID(w http.ResponseWriter, r *http.Request, memberId int)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get all members
// (GET /member)
func (_ Unimplemented) GetAllMembers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new member
// (POST /member)
func (_ Unimplemented) CreateMember(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a member by ID
// (DELETE /member/{member_id})
func (_ Unimplemented) DeleteMemberByID(w http.ResponseWriter, r *http.Request, memberId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a member by ID
// (GET /member/{member_id})
func (_ Unimplemented) GetMemberByID(w http.ResponseWriter, r *http.Request, memberId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a member by ID
// (PUT /member/{member_id})
func (_ Unimplemented) UpdateMemberByID(w http.ResponseWriter, r *http.Request, memberId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a member's credentials by ID
// (DELETE /member/{member_id}/Credentials)
func (_ Unimplemented) DeleteMemberCredentialsByID(w http.ResponseWriter, r *http.Request, memberId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a member's credentials by ID
// (GET /member/{member_id}/Credentials)
func (_ Unimplemented) GetMemberCredentialsByID(w http.ResponseWriter, r *http.Request, memberId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a member's credentials by ID
// (PUT /member/{member_id}/Credentials)
func (_ Unimplemented) UpdateMemberCredentialsByID(w http.ResponseWriter, r *http.Request, memberId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAllMembers operation middleware
func (siw *ServerInterfaceWrapper) GetAllMembers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllMembers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateMember operation middleware
func (siw *ServerInterfaceWrapper) CreateMember(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateMember(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteMemberByID operation middleware
func (siw *ServerInterfaceWrapper) DeleteMemberByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "member_id" -------------
	var memberId int

	err = runtime.BindStyledParameterWithOptions("simple", "member_id", chi.URLParam(r, "member_id"), &memberId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "member_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteMemberByID(w, r, memberId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMemberByID operation middleware
func (siw *ServerInterfaceWrapper) GetMemberByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "member_id" -------------
	var memberId int

	err = runtime.BindStyledParameterWithOptions("simple", "member_id", chi.URLParam(r, "member_id"), &memberId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "member_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMemberByID(w, r, memberId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateMemberByID operation middleware
func (siw *ServerInterfaceWrapper) UpdateMemberByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "member_id" -------------
	var memberId int

	err = runtime.BindStyledParameterWithOptions("simple", "member_id", chi.URLParam(r, "member_id"), &memberId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "member_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateMemberByID(w, r, memberId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteMemberCredentialsByID operation middleware
func (siw *ServerInterfaceWrapper) DeleteMemberCredentialsByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "member_id" -------------
	var memberId int

	err = runtime.BindStyledParameterWithOptions("simple", "member_id", chi.URLParam(r, "member_id"), &memberId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "member_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteMemberCredentialsByID(w, r, memberId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMemberCredentialsByID operation middleware
func (siw *ServerInterfaceWrapper) GetMemberCredentialsByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "member_id" -------------
	var memberId int

	err = runtime.BindStyledParameterWithOptions("simple", "member_id", chi.URLParam(r, "member_id"), &memberId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "member_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMemberCredentialsByID(w, r, memberId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateMemberCredentialsByID operation middleware
func (siw *ServerInterfaceWrapper) UpdateMemberCredentialsByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "member_id" -------------
	var memberId int

	err = runtime.BindStyledParameterWithOptions("simple", "member_id", chi.URLParam(r, "member_id"), &memberId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "member_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateMemberCredentialsByID(w, r, memberId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/member", wrapper.GetAllMembers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/member", wrapper.CreateMember)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/member/{member_id}", wrapper.DeleteMemberByID)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/member/{member_id}", wrapper.GetMemberByID)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/member/{member_id}", wrapper.UpdateMemberByID)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/member/{member_id}/Credentials", wrapper.DeleteMemberCredentialsByID)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/member/{member_id}/Credentials", wrapper.GetMemberCredentialsByID)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/member/{member_id}/Credentials", wrapper.UpdateMemberCredentialsByID)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXz2/bNhT+VwhuwC6ypXbFUOiWNsDgw7AeslMRBIz0bLOhSI58aioE+t8HkopFWXZs",
	"z3Z8aG6yTL4f3/e9j9QTLVSllQSJluZP1BZLqJh/rKC6B+OetFEaDHLw7wsDDKG8Y+h+zZWp3BMtGcIE",
	"eQU0odhooDm1aLhc0IT+mCim+aRQJSxATuAHGjZBtgh5mLZo6gJr4zZF4ds2oVAxLgaJwpvjkoQYLv6c",
	"G4t3klXglh0TM4rkAgt2orh9IBc2sHLHywEmXOIfH3pMuERYgDkwUR/aJap1eU6ao/CtS2fg35obKGn+",
	"NSokWbEdoRtjm8R6GRR9u6pP3X+DAmkPXthy51KCxbHC3zQ31Jxm1j4qM5Tc6uUYlUfDEf6WoqE5mhoO",
	"S72KO5LFTimstu7DvdVKWhiT39verwbmNKe/pL1Fpp0/pt2qzcrdkb8EiZwJu7OIV5jymNpjBLOdtXiY",
	"9yRoBVAY5+2D+hPDdDEB7+LkzTwvcmD//yN0H65fV2tuIZdz5eKWYAvDNXIlaU6vvszIXBlyw+zDjWHF",
	"A5iEMKKNcjtJxSRbQAUSCZMlQWYfCLplXC6IbSxCNXWgcxQuXxSFXH2Z0YR+B2NDpmz6bpo5KJQGyTSn",
	"Of19mk3f+/HEpe8+7dtfgB8Fhw1ztc5KmtM/Aa+E+MsvstQ1H3D0m99nmb9NK4kg/WamteCF355+s66K",
	"5/u4e+IIld0P6Z6wdoUtM4Y1Ado1SIngFomak6or1K2xdVUx04QmCBOi/zehWtkN3X72J2volgamweIn",
	"VTYH9blHe2v3tzXxuytHOwL73dmKeIZ6DO3NEoiER9GQ7pJKoknoEQ7AEebWxiu6TOnTapjbMBECEMb4",
	"X/v3Af9PzezaK9WwCtDRln992lDd7NoRj0vo8hJUpIvvRtCfWLikCQ2+OLCVIeJJhN6aqbXt7YiOD+PZ",
	"7ioI6Uti66IAa+e1EM0aYKFTwp6Lvm/I7NoJc9sUHg+Ki3xeRLJTC3SXMrvmHjkufbNWQ8HnHEoP5tgD",
	"RmjregPa//gj43jAw9FzeszPZkpr96K9TCk7WxEvU999Jm+2o8DgiO/NhpR+7q/r+5pTtOV4nyLR94K7",
	"GlzMt+I6Dvew3+wgwJ6OdiIkF4CvDGN2htN4/Fn9ovGtIX6oDW4jbKcpnoizMMLnp+2cl7ht3/mX8c5D",
	"JDQ00KEWXrbTzbrxW8B8f9ZAbQTN6RJR52kqVMHEUlnMP2Yfs9R9jLS37X8BAAD//yh9et26FwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../schemas/auth.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(pathPrefix, "../schemas/errors.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef2.PathToRawSpec(path.Join(pathPrefix, "../schemas/member.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef3.PathToRawSpec(path.Join(pathPrefix, "../schemas/project.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef4.PathToRawSpec(path.Join(pathPrefix, "../schemas/task.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
