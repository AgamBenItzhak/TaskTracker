// Package member provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package member

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/AgamBenItzhak/TaskTracker/api/schemas/auth"
	externalRef1 "github.com/AgamBenItzhak/TaskTracker/api/schemas/errors"
	externalRef2 "github.com/AgamBenItzhak/TaskTracker/api/schemas/member"
	externalRef3 "github.com/AgamBenItzhak/TaskTracker/api/schemas/project"
	externalRef4 "github.com/AgamBenItzhak/TaskTracker/api/schemas/task"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// RegisterMemberJSONRequestBody defines body for RegisterMember for application/json ContentType.
type RegisterMemberJSONRequestBody = externalRef2.MemberCreateRequest

// LoginMemberJSONRequestBody defines body for LoginMember for application/json ContentType.
type LoginMemberJSONRequestBody = externalRef2.LoginRequest

// LogoutMemberJSONRequestBody defines body for LogoutMember for application/json ContentType.
type LogoutMemberJSONRequestBody = externalRef2.LogoutRequest

// UpdateMemberByIDJSONRequestBody defines body for UpdateMemberByID for application/json ContentType.
type UpdateMemberByIDJSONRequestBody = externalRef2.MemberUpdateRequest

// UpdateMemberCredentialsByIDJSONRequestBody defines body for UpdateMemberCredentialsByID for application/json ContentType.
type UpdateMemberCredentialsByIDJSONRequestBody = externalRef2.MemberCredentialsUpdateRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all members
	// (GET /member)
	GetAllMembers(w http.ResponseWriter, r *http.Request)
	// Create a new member
	// (POST /member)
	RegisterMember(w http.ResponseWriter, r *http.Request)
	// Log in a member
	// (POST /member/login)
	LoginMember(w http.ResponseWriter, r *http.Request)
	// Log out a member
	// (POST /member/logout)
	LogoutMember(w http.ResponseWriter, r *http.Request)
	// Delete a member by ID
	// (DELETE /member/{member_id})
	DeleteMemberByID(w http.ResponseWriter, r *http.Request, memberId int)
	// Get a member by ID
	// (GET /member/{member_id})
	GetMemberByID(w http.ResponseWriter, r *http.Request, memberId int)
	// Update a member by ID
	// (PUT /member/{member_id})
	UpdateMemberByID(w http.ResponseWriter, r *http.Request, memberId int)
	// Delete a member's credentials by ID
	// (DELETE /member/{member_id}/Credentials)
	DeleteMemberCredentialsByID(w http.ResponseWriter, r *http.Request, memberId int)
	// Get a member's credentials by ID
	// (GET /member/{member_id}/Credentials)
	GetMemberCredentialsByID(w http.ResponseWriter, r *http.Request, memberId int)
	// Update a member's credentials by ID
	// (PUT /member/{member_id}/Credentials)
	UpdateMemberCredentialsByID(w http.ResponseWriter, r *http.Request, memberId int)
	// Get all project IDs for a member
	// (GET /member/{member_id}/project-ids)
	GetAllMemberProjectIDs(w http.ResponseWriter, r *http.Request, memberId int)
	// Get all projects for a member
	// (GET /member/{member_id}/projects)
	GetAllMemberProjects(w http.ResponseWriter, r *http.Request, memberId int)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get all members
// (GET /member)
func (_ Unimplemented) GetAllMembers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new member
// (POST /member)
func (_ Unimplemented) RegisterMember(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Log in a member
// (POST /member/login)
func (_ Unimplemented) LoginMember(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Log out a member
// (POST /member/logout)
func (_ Unimplemented) LogoutMember(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a member by ID
// (DELETE /member/{member_id})
func (_ Unimplemented) DeleteMemberByID(w http.ResponseWriter, r *http.Request, memberId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a member by ID
// (GET /member/{member_id})
func (_ Unimplemented) GetMemberByID(w http.ResponseWriter, r *http.Request, memberId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a member by ID
// (PUT /member/{member_id})
func (_ Unimplemented) UpdateMemberByID(w http.ResponseWriter, r *http.Request, memberId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a member's credentials by ID
// (DELETE /member/{member_id}/Credentials)
func (_ Unimplemented) DeleteMemberCredentialsByID(w http.ResponseWriter, r *http.Request, memberId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a member's credentials by ID
// (GET /member/{member_id}/Credentials)
func (_ Unimplemented) GetMemberCredentialsByID(w http.ResponseWriter, r *http.Request, memberId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a member's credentials by ID
// (PUT /member/{member_id}/Credentials)
func (_ Unimplemented) UpdateMemberCredentialsByID(w http.ResponseWriter, r *http.Request, memberId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all project IDs for a member
// (GET /member/{member_id}/project-ids)
func (_ Unimplemented) GetAllMemberProjectIDs(w http.ResponseWriter, r *http.Request, memberId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all projects for a member
// (GET /member/{member_id}/projects)
func (_ Unimplemented) GetAllMemberProjects(w http.ResponseWriter, r *http.Request, memberId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAllMembers operation middleware
func (siw *ServerInterfaceWrapper) GetAllMembers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllMembers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RegisterMember operation middleware
func (siw *ServerInterfaceWrapper) RegisterMember(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RegisterMember(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// LoginMember operation middleware
func (siw *ServerInterfaceWrapper) LoginMember(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LoginMember(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// LogoutMember operation middleware
func (siw *ServerInterfaceWrapper) LogoutMember(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LogoutMember(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteMemberByID operation middleware
func (siw *ServerInterfaceWrapper) DeleteMemberByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "member_id" -------------
	var memberId int

	err = runtime.BindStyledParameterWithOptions("simple", "member_id", chi.URLParam(r, "member_id"), &memberId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "member_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteMemberByID(w, r, memberId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMemberByID operation middleware
func (siw *ServerInterfaceWrapper) GetMemberByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "member_id" -------------
	var memberId int

	err = runtime.BindStyledParameterWithOptions("simple", "member_id", chi.URLParam(r, "member_id"), &memberId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "member_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMemberByID(w, r, memberId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateMemberByID operation middleware
func (siw *ServerInterfaceWrapper) UpdateMemberByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "member_id" -------------
	var memberId int

	err = runtime.BindStyledParameterWithOptions("simple", "member_id", chi.URLParam(r, "member_id"), &memberId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "member_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateMemberByID(w, r, memberId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteMemberCredentialsByID operation middleware
func (siw *ServerInterfaceWrapper) DeleteMemberCredentialsByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "member_id" -------------
	var memberId int

	err = runtime.BindStyledParameterWithOptions("simple", "member_id", chi.URLParam(r, "member_id"), &memberId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "member_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteMemberCredentialsByID(w, r, memberId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMemberCredentialsByID operation middleware
func (siw *ServerInterfaceWrapper) GetMemberCredentialsByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "member_id" -------------
	var memberId int

	err = runtime.BindStyledParameterWithOptions("simple", "member_id", chi.URLParam(r, "member_id"), &memberId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "member_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMemberCredentialsByID(w, r, memberId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateMemberCredentialsByID operation middleware
func (siw *ServerInterfaceWrapper) UpdateMemberCredentialsByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "member_id" -------------
	var memberId int

	err = runtime.BindStyledParameterWithOptions("simple", "member_id", chi.URLParam(r, "member_id"), &memberId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "member_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateMemberCredentialsByID(w, r, memberId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAllMemberProjectIDs operation middleware
func (siw *ServerInterfaceWrapper) GetAllMemberProjectIDs(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "member_id" -------------
	var memberId int

	err = runtime.BindStyledParameterWithOptions("simple", "member_id", chi.URLParam(r, "member_id"), &memberId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "member_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllMemberProjectIDs(w, r, memberId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAllMemberProjects operation middleware
func (siw *ServerInterfaceWrapper) GetAllMemberProjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "member_id" -------------
	var memberId int

	err = runtime.BindStyledParameterWithOptions("simple", "member_id", chi.URLParam(r, "member_id"), &memberId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "member_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllMemberProjects(w, r, memberId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/member", wrapper.GetAllMembers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/member", wrapper.RegisterMember)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/member/login", wrapper.LoginMember)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/member/logout", wrapper.LogoutMember)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/member/{member_id}", wrapper.DeleteMemberByID)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/member/{member_id}", wrapper.GetMemberByID)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/member/{member_id}", wrapper.UpdateMemberByID)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/member/{member_id}/Credentials", wrapper.DeleteMemberCredentialsByID)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/member/{member_id}/Credentials", wrapper.GetMemberCredentialsByID)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/member/{member_id}/Credentials", wrapper.UpdateMemberCredentialsByID)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/member/{member_id}/project-ids", wrapper.GetAllMemberProjectIDs)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/member/{member_id}/projects", wrapper.GetAllMemberProjects)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYTW/bOBP+KwTfF+hFjt1usSh8a2tgYaCLLRbdUxEYjDSW2Uiklhw1NQL99wVJWaK+",
	"/BFbcQ652RQ5H88MnxnOIw1lmkkBAjWdP1IdbiBl9mciYy5WCv7NQaNZyJTMQCEH+zmF9A7Uikfmz1qq",
	"lCGdUy7w9/c0oLjNwP2FGBQN6K+JZBmfhDKCGMQEfqFiE2Sxk8UyjSoPMVfmVC26KAKaMa0fpLJ6SrEa",
	"FRfxiVIrOYWRavziCiI6/+7p87TdVk7Iux8QIi2CChKdSaGhi4mCtQK9WaG8B2EW/q9gTef0f9Ma5WkJ",
	"8dRtKgJ6yu6W5W41aCkeMF3mePVwDiK/1+YhvF+i0e5r19ZQAUOIVgwbxkYMYYI8hdrgJ2W3J97YCynj",
	"SUORWzlPiZNh5K+50rgSLIVzr6UnyQhO2IXk1oKKKirPwFZ5Fo0ZZk/8XhrbRdtD18c28POlYfRwSq/c",
	"kWEKec25Zs75hauCpFrsovKgOMJfItnSOaocLlXdDqbC3pLXjv1+Kj5Uxcpd/Zl7QH8EAjlL9PXrwYvq",
	"SXoActf5tXXrgelqCXwoJq/keZWC/fQSekysnzvXMiXtzys3nxHoUPEMuRTnJoUvyva1IloZq0dxoxJe",
	"1FiOkoGebF/VJW5RQ5YRrpEpHA8zT3ypDXN9rhOllCv3016UWjE6rX3eHR3mA+/e7iOE3bYBQ3uVV8OF",
	"psZq+RzwdjOJ3qFE1xizj4u1NJIaFEE/fl2StVTkG9P33xQL70EFhJHSL5IywWJIQSBhIiLI9D1Bs42L",
	"mOitRkhvTB5wTIw+Twr5+HVJA/oTlHaaZjdvb2YGF5mBYBmnc/rbzezmnW0fcGO9nNb0HIMNikGOGVuX",
	"EZ3TPwA/JsmfdpO2wxcXV3v43WxmCVcKBGEPsyxLeGiPT39oR4kuouYXR0j1cZWgTqCiwpYpxbYO2hak",
	"JOEaiVyTtDTUXs88TZnaOicIS5L6a0AzqXu8/RtirhGU85e6UIPGTzLanuTpEQ62XpitzDKPoqID99vR",
	"jNiB3QX32waIgIdkS0oeIF6trjH+bD8SZvb6O0pNUztOtHezF/kv5vOosDdHvEfBPbu48v0wO6jeaFIP",
	"QGuAv8iYcEHYALgyx73oyhzHhtefuR6F7/vLaz8GYLJhmtwBCJLIOIaIGOy6YMsc+9F+rDrnwtF7Aq7h",
	"aIK+sOsO9E/b5cLSrmIpoOGg+ffHHgOXC8NiWJuKkpTyTT2xz0Pc0IC69qnRwzfRDjzkWv1bUdz2h6Jp",
	"T2mBUx8RnYchaL3Ok2TbQst5WoFF7rZkuTAsO1RSzgfFSB4XkdmlufbI5HzguLHO6gxCvuYQWTC7Ba2D",
	"dpb3oP2P7dfOB9z1fZfHfLT62hpCPDPhD7yOB0JfNtX9ldVFsBPvfkKafq5nY8eSk3fkfJ4i3nDO9LlX",
	"4y3fjtM57I1uCDiS0S6EZAz4zDDORmgsuzPsQ22P7/OpNDgUsIOkeKGYuSs8ftjGfI8MDdWvw52npFCT",
	"QJu5sJ9O+/NmgFzLR/qER/qoF/NXt3+50OdQwW40sFy8PCqonvRtyae82lsOtq79rigG9H0f3TukiZBI",
	"1jIX0cDbv63jUGe/i/VJgb5EmF9wjI+Y1z1xbuP7Pmb4O7E3m0H93EUrVwmd0w1iNp9OExmyZCM1zj/M",
	"PsymLOO0uC3+CwAA//+lkY6hRiYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../schemas/auth.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(pathPrefix, "../schemas/errors.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef2.PathToRawSpec(path.Join(pathPrefix, "../schemas/member.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef3.PathToRawSpec(path.Join(pathPrefix, "../schemas/project.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef4.PathToRawSpec(path.Join(pathPrefix, "../schemas/task.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
