// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// RegisterUser defines model for RegisterUser.
type RegisterUser struct {
	Email     openapi_types.Email `json:"email" mapstructure:"email"`
	FirstName string              `json:"first_name" mapstructure:"first_name"`
	LastName  string              `json:"last_name" mapstructure:"last_name"`
	Password  string              `json:"password" mapstructure:"password"`
}

// AuthRequest defines model for auth_request.
type AuthRequest struct {
	Email    *openapi_types.Email `json:"email,omitempty" mapstructure:"email"`
	Password *string              `json:"password,omitempty" mapstructure:"password"`
}

// AuthResponse defines model for auth_response.
type AuthResponse struct {
	Token *string `json:"token,omitempty" mapstructure:"token"`
}

// Error defines model for error.
type Error struct {
	Error *string `json:"error,omitempty" mapstructure:"error"`
}

// LoginRequest defines model for login_request.
type LoginRequest struct {
	Email    openapi_types.Email `json:"email" mapstructure:"email"`
	Password string              `json:"password" mapstructure:"password"`
}

// LoginResponse defines model for login_response.
type LoginResponse struct {
	AccessToken  string  `json:"access_token" mapstructure:"access_token"`
	ExpiresIn    int32   `json:"expires_in" mapstructure:"expires_in"`
	RefreshToken *string `json:"refresh_token,omitempty" mapstructure:"refresh_token"`
	TokenType    string  `json:"token_type" mapstructure:"token_type"`
}

// LogoutResponse defines model for logout_response.
type LogoutResponse struct {
	Message string `json:"message" mapstructure:"message"`
}

// PasswordChangeRequest defines model for password_change_request.
type PasswordChangeRequest struct {
	CurrentPassword string `json:"current_password" mapstructure:"current_password"`
	NewPassword     string `json:"new_password" mapstructure:"new_password"`
}

// PasswordChangeResponse defines model for password_change_response.
type PasswordChangeResponse struct {
	Message string `json:"message" mapstructure:"message"`
}

// Project defines model for project.
type Project struct {
	CreatedAt   *time.Time          `json:"created_at,omitempty" mapstructure:"created_at"`
	Description *string             `json:"description,omitempty" mapstructure:"description"`
	EndDate     *openapi_types.Date `json:"end_date,omitempty" mapstructure:"end_date"`
	ProjectId   *int64              `json:"project_id,omitempty" mapstructure:"project_id"`
	ProjectName *string             `json:"project_name,omitempty" mapstructure:"project_name"`
	StartDate   *openapi_types.Date `json:"start_date,omitempty" mapstructure:"start_date"`
	Status      *string             `json:"status,omitempty" mapstructure:"status"`
	UpdatedAt   *time.Time          `json:"updated_at,omitempty" mapstructure:"updated_at"`
}

// ProjectUser defines model for project_user.
type ProjectUser struct {
	CreatedAt *time.Time `json:"created_at,omitempty" mapstructure:"created_at"`
	ProjectId *int64     `json:"project_id,omitempty" mapstructure:"project_id"`
	Role      *string    `json:"role,omitempty" mapstructure:"role"`
	UpdatedAt *time.Time `json:"updated_at,omitempty" mapstructure:"updated_at"`
	UserId    *int64     `json:"user_id,omitempty" mapstructure:"user_id"`
}

// RefreshTokenRequest defines model for refresh_token_request.
type RefreshTokenRequest struct {
	RefreshToken string `json:"refresh_token" mapstructure:"refresh_token"`
}

// RefreshTokenResponse defines model for refresh_token_response.
type RefreshTokenResponse struct {
	AccessToken  string  `json:"access_token" mapstructure:"access_token"`
	ExpiresIn    int32   `json:"expires_in" mapstructure:"expires_in"`
	RefreshToken *string `json:"refresh_token,omitempty" mapstructure:"refresh_token"`
	TokenType    string  `json:"token_type" mapstructure:"token_type"`
}

// Task defines model for task.
type Task struct {
	CreatedAt   *time.Time          `json:"created_at,omitempty" mapstructure:"created_at"`
	Description *string             `json:"description,omitempty" mapstructure:"description"`
	EndDate     *openapi_types.Date `json:"end_date,omitempty" mapstructure:"end_date"`
	Priority    *string             `json:"priority,omitempty" mapstructure:"priority"`
	StartDate   *openapi_types.Date `json:"start_date,omitempty" mapstructure:"start_date"`
	Status      *string             `json:"status,omitempty" mapstructure:"status"`
	TaskGroupId *int64              `json:"task_group_id,omitempty" mapstructure:"task_group_id"`
	TaskId      *int64              `json:"task_id,omitempty" mapstructure:"task_id"`
	TaskName    *string             `json:"task_name,omitempty" mapstructure:"task_name"`
	UpdatedAt   *time.Time          `json:"updated_at,omitempty" mapstructure:"updated_at"`
}

// TaskGroup defines model for task_group.
type TaskGroup struct {
	CreatedAt   *time.Time `json:"created_at,omitempty" mapstructure:"created_at"`
	Description *string    `json:"description,omitempty" mapstructure:"description"`
	GroupName   *string    `json:"group_name,omitempty" mapstructure:"group_name"`
	ProjectId   *int64     `json:"project_id,omitempty" mapstructure:"project_id"`
	TaskGroupId *int64     `json:"task_group_id,omitempty" mapstructure:"task_group_id"`
	UpdatedAt   *time.Time `json:"updated_at,omitempty" mapstructure:"updated_at"`
}

// Token defines model for token.
type Token struct {
	Token *string `json:"token,omitempty" mapstructure:"token"`
}

// User defines model for user.
type User struct {
	CreatedAt *time.Time           `json:"created_at,omitempty" mapstructure:"created_at"`
	Email     *openapi_types.Email `json:"email,omitempty" mapstructure:"email"`
	FirstName *string              `json:"first_name,omitempty" mapstructure:"first_name"`
	LastName  *string              `json:"last_name,omitempty" mapstructure:"last_name"`
	LastSeen  *time.Time           `json:"last_seen,omitempty" mapstructure:"last_seen"`
	Password  *string              `json:"password,omitempty" mapstructure:"password"`
	UpdatedAt *time.Time           `json:"updated_at,omitempty" mapstructure:"updated_at"`
	UserId    *int64               `json:"user_id,omitempty" mapstructure:"user_id"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+yZz2+bShDH/xW0Z2zlJU/v4Fve4Ul5l0Ztqh6qCE1gDFub3e3s0MSK/L9XC8aAsaM0",
	"a4jb5MYvfWb2O7MzAzyKWOdGK1RsxexR2DjDHMrDj5hKy0ifLZI7N6QNEkss72IOcukO5ppyYDHbXAkF",
	"rwyKmbBMUqUiFA8TDUZOYp1gimqCD0wwYUhLTA7GMhUxF4Rbxnodirkky5GCHN1jPswWyYGXcCRuA3JY",
	"A9bea0o6kmwv+qmyxaydJcLvhSRMxOzrVvOWodZy24u93bqg775hzGIdCig4ixwOLY8f4bZix1Pn0CKt",
	"0cpif5WsF6h8Xagg++0jkd63f+rLXmKWkP12lzqV6jSi+4r74fYJZQ6lBMQxWhsdJTM6LOctPhhJaCOp",
	"OspIxRfnjSxSMaZIv6p+w66EmRPa7DgL6cLKjHNHUcV8FAnOoVi6pfyLQKXr3juqgveC3NG040dH3gOh",
	"1wU/EfscrYXUuzfUmJ7v9Y19ztVJG8UZqBQP7924IELF0ZB7rGfDrUTh/aBGO/yedj2Xdhx6nqYnGXnS",
	"5WE/0oTAmETAHbkTYJywLFu8V5AbvHM3QRuTNCy1d7loo8qyp5LIed1bhm/DqbnrRsZIJru19Z+/fWtr",
	"i902dYxBssNycMtAPIhcLfLGEBfW1/8NxQELkwyZry38/qGnlrLY+84y7m4aMRtJL72zsGSMHcNQuEgN",
	"IlEN3p8onXHmcKcddITaaRDd27fPcPp9gH1zAyyDXbyPCb5jgtQkeeXftzec37tnu5SKUtKFGaQOd/Fb",
	"g4OZahs5xnTWgE5hwGnU/IOrQJUtxwheizTySDb6rnr1zKyb9MjfV09h1H//GdL9GVKeWUQ1iPgN/SUf",
	"mu9JMn5Qy5WYMRX44i/Pb+JFyc0bGBduyvkUZ5hXm+uuHJAvC86as/9qn/7/ciPC6j+iI93tDNMZs6lM",
	"STXX1eDdaiTi8voqmGsKbsAubgjiBVIYQLCprkEOClLMUXEAKglcGQzYPSZVGtiVZcynzphk90YsWpTg",
	"8vpKhOIHkq0snU3/mp65CqINKjBSzMTF9Gx6Xv4+4MytdL3+GQAA//96yar1IB0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
