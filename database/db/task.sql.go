// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: task.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CreateTask = `-- name: CreateTask :execlastid
INSERT INTO task (task_group_id, task_name, description, status, priority, start_date, end_date, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
RETURNING task_id
`

type CreateTaskParams struct {
	TaskGroupID int32       `db:"task_group_id" json:"task_group_id"`
	TaskName    string      `db:"task_name" json:"task_name"`
	Description pgtype.Text `db:"description" json:"description"`
	Status      string      `db:"status" json:"status"`
	Priority    string      `db:"priority" json:"priority"`
	StartDate   pgtype.Date `db:"start_date" json:"start_date"`
	EndDate     pgtype.Date `db:"end_date" json:"end_date"`
}

const CreateTaskGroup = `-- name: CreateTaskGroup :execlastid
INSERT INTO task_group (project_id, group_name, description, status, priority, start_date, end_date, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
RETURNING task_group_id
`

type CreateTaskGroupParams struct {
	ProjectID   int32       `db:"project_id" json:"project_id"`
	GroupName   string      `db:"group_name" json:"group_name"`
	Description pgtype.Text `db:"description" json:"description"`
	Status      string      `db:"status" json:"status"`
	Priority    string      `db:"priority" json:"priority"`
	StartDate   pgtype.Date `db:"start_date" json:"start_date"`
	EndDate     pgtype.Date `db:"end_date" json:"end_date"`
}

const CreateTaskGroupMember = `-- name: CreateTaskGroupMember :exec
INSERT INTO task_group_member (member_id, task_group_id, role, created_at, updated_at)
VALUES ($1, $2, $3, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
`

type CreateTaskGroupMemberParams struct {
	MemberID    int32  `db:"member_id" json:"member_id"`
	TaskGroupID int32  `db:"task_group_id" json:"task_group_id"`
	Role        string `db:"role" json:"role"`
}

// Insert a new member into a Task Group
func (q *Queries) CreateTaskGroupMember(ctx context.Context, arg CreateTaskGroupMemberParams) error {
	_, err := q.db.Exec(ctx, CreateTaskGroupMember, arg.MemberID, arg.TaskGroupID, arg.Role)
	return err
}

const CreateTaskMember = `-- name: CreateTaskMember :exec
INSERT INTO task_member (member_id, task_id, role, created_at, updated_at)
VALUES ($1, $2, $3, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
`

type CreateTaskMemberParams struct {
	MemberID int32  `db:"member_id" json:"member_id"`
	TaskID   int32  `db:"task_id" json:"task_id"`
	Role     string `db:"role" json:"role"`
}

// Insert a new member into a Task
func (q *Queries) CreateTaskMember(ctx context.Context, arg CreateTaskMemberParams) error {
	_, err := q.db.Exec(ctx, CreateTaskMember, arg.MemberID, arg.TaskID, arg.Role)
	return err
}

const DeleteTaskByID = `-- name: DeleteTaskByID :exec
DELETE FROM task WHERE task_id = $1
`

// Delete a Task from the database
func (q *Queries) DeleteTaskByID(ctx context.Context, taskID int32) error {
	_, err := q.db.Exec(ctx, DeleteTaskByID, taskID)
	return err
}

const DeleteTaskGroupByID = `-- name: DeleteTaskGroupByID :exec
DELETE FROM task_group WHERE task_group_id = $1
`

// Delete a Task Group from the database
func (q *Queries) DeleteTaskGroupByID(ctx context.Context, taskGroupID int32) error {
	_, err := q.db.Exec(ctx, DeleteTaskGroupByID, taskGroupID)
	return err
}

const DeleteTaskGroupMemberByID = `-- name: DeleteTaskGroupMemberByID :exec
DELETE FROM task_group_member WHERE member_id = $1 AND task_group_id = $2
`

type DeleteTaskGroupMemberByIDParams struct {
	MemberID    int32 `db:"member_id" json:"member_id"`
	TaskGroupID int32 `db:"task_group_id" json:"task_group_id"`
}

// Remove a member from a Task Group
func (q *Queries) DeleteTaskGroupMemberByID(ctx context.Context, arg DeleteTaskGroupMemberByIDParams) error {
	_, err := q.db.Exec(ctx, DeleteTaskGroupMemberByID, arg.MemberID, arg.TaskGroupID)
	return err
}

const DeleteTaskMemberByID = `-- name: DeleteTaskMemberByID :exec
DELETE FROM task_member WHERE member_id = $1 AND task_id = $2
`

type DeleteTaskMemberByIDParams struct {
	MemberID int32 `db:"member_id" json:"member_id"`
	TaskID   int32 `db:"task_id" json:"task_id"`
}

// Remove a member from a Task
func (q *Queries) DeleteTaskMemberByID(ctx context.Context, arg DeleteTaskMemberByIDParams) error {
	_, err := q.db.Exec(ctx, DeleteTaskMemberByID, arg.MemberID, arg.TaskID)
	return err
}

const GetAllTaskGroupMembers = `-- name: GetAllTaskGroupMembers :many
SELECT member_id, task_group_id, role, created_at, updated_at FROM task_group_member WHERE task_group_id = $1
`

// Get all members assigned to a Task Group
func (q *Queries) GetAllTaskGroupMembers(ctx context.Context, taskGroupID int32) ([]TaskGroupMember, error) {
	rows, err := q.db.Query(ctx, GetAllTaskGroupMembers, taskGroupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TaskGroupMember
	for rows.Next() {
		var i TaskGroupMember
		if err := rows.Scan(
			&i.MemberID,
			&i.TaskGroupID,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetAllTaskGroups = `-- name: GetAllTaskGroups :many
SELECT task_group_id, project_id, group_name, description, status, priority, start_date, end_date, created_at, updated_at FROM task_group WHERE project_id = $1
`

// Get all Task Groups for a project
func (q *Queries) GetAllTaskGroups(ctx context.Context, projectID int32) ([]TaskGroup, error) {
	rows, err := q.db.Query(ctx, GetAllTaskGroups, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TaskGroup
	for rows.Next() {
		var i TaskGroup
		if err := rows.Scan(
			&i.TaskGroupID,
			&i.ProjectID,
			&i.GroupName,
			&i.Description,
			&i.Status,
			&i.Priority,
			&i.StartDate,
			&i.EndDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetAllTaskMembers = `-- name: GetAllTaskMembers :many
SELECT member_id, task_id, role, created_at, updated_at FROM task_member WHERE task_id = $1
`

// Get all members assigned to a Task
func (q *Queries) GetAllTaskMembers(ctx context.Context, taskID int32) ([]TaskMember, error) {
	rows, err := q.db.Query(ctx, GetAllTaskMembers, taskID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TaskMember
	for rows.Next() {
		var i TaskMember
		if err := rows.Scan(
			&i.MemberID,
			&i.TaskID,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetAllTasks = `-- name: GetAllTasks :many
SELECT task_id, task_group_id, task_name, description, status, priority, start_date, end_date, created_at, updated_at FROM task WHERE task_group_id = $1
`

// Get all Tasks for a Task Group
func (q *Queries) GetAllTasks(ctx context.Context, taskGroupID int32) ([]Task, error) {
	rows, err := q.db.Query(ctx, GetAllTasks, taskGroupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.TaskID,
			&i.TaskGroupID,
			&i.TaskName,
			&i.Description,
			&i.Status,
			&i.Priority,
			&i.StartDate,
			&i.EndDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetTaskByID = `-- name: GetTaskByID :one
SELECT task_id, task_group_id, task_name, description, status, priority, start_date, end_date, created_at, updated_at FROM task WHERE task_id = $1
`

// Get a Task by its ID
func (q *Queries) GetTaskByID(ctx context.Context, taskID int32) (Task, error) {
	row := q.db.QueryRow(ctx, GetTaskByID, taskID)
	var i Task
	err := row.Scan(
		&i.TaskID,
		&i.TaskGroupID,
		&i.TaskName,
		&i.Description,
		&i.Status,
		&i.Priority,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetTaskGroupByID = `-- name: GetTaskGroupByID :one
SELECT task_group_id, project_id, group_name, description, status, priority, start_date, end_date, created_at, updated_at FROM task_group WHERE task_group_id = $1
`

// Get a Task Group by its ID
func (q *Queries) GetTaskGroupByID(ctx context.Context, taskGroupID int32) (TaskGroup, error) {
	row := q.db.QueryRow(ctx, GetTaskGroupByID, taskGroupID)
	var i TaskGroup
	err := row.Scan(
		&i.TaskGroupID,
		&i.ProjectID,
		&i.GroupName,
		&i.Description,
		&i.Status,
		&i.Priority,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetTaskGroupMemberByID = `-- name: GetTaskGroupMemberByID :one
SELECT member_id, task_group_id, role, created_at, updated_at FROM task_group_member WHERE member_id = $1 AND task_group_id = $2
`

type GetTaskGroupMemberByIDParams struct {
	MemberID    int32 `db:"member_id" json:"member_id"`
	TaskGroupID int32 `db:"task_group_id" json:"task_group_id"`
}

// Get a member's Task Group by their ID
func (q *Queries) GetTaskGroupMemberByID(ctx context.Context, arg GetTaskGroupMemberByIDParams) (TaskGroupMember, error) {
	row := q.db.QueryRow(ctx, GetTaskGroupMemberByID, arg.MemberID, arg.TaskGroupID)
	var i TaskGroupMember
	err := row.Scan(
		&i.MemberID,
		&i.TaskGroupID,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetTaskMemberByID = `-- name: GetTaskMemberByID :one
SELECT member_id, task_id, role, created_at, updated_at FROM task_member WHERE member_id = $1 AND task_id = $2
`

type GetTaskMemberByIDParams struct {
	MemberID int32 `db:"member_id" json:"member_id"`
	TaskID   int32 `db:"task_id" json:"task_id"`
}

// Get a member's Task by their ID
func (q *Queries) GetTaskMemberByID(ctx context.Context, arg GetTaskMemberByIDParams) (TaskMember, error) {
	row := q.db.QueryRow(ctx, GetTaskMemberByID, arg.MemberID, arg.TaskID)
	var i TaskMember
	err := row.Scan(
		&i.MemberID,
		&i.TaskID,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const UpdateTaskByID = `-- name: UpdateTaskByID :exec
UPDATE task SET task_name = $2, description = $3, status = $4, priority = $5, start_date = $6, end_date = $7, updated_at = CURRENT_TIMESTAMP
WHERE task_id = $1
`

type UpdateTaskByIDParams struct {
	TaskID      int32       `db:"task_id" json:"task_id"`
	TaskName    string      `db:"task_name" json:"task_name"`
	Description pgtype.Text `db:"description" json:"description"`
	Status      string      `db:"status" json:"status"`
	Priority    string      `db:"priority" json:"priority"`
	StartDate   pgtype.Date `db:"start_date" json:"start_date"`
	EndDate     pgtype.Date `db:"end_date" json:"end_date"`
}

// Update a Task's information
func (q *Queries) UpdateTaskByID(ctx context.Context, arg UpdateTaskByIDParams) error {
	_, err := q.db.Exec(ctx, UpdateTaskByID,
		arg.TaskID,
		arg.TaskName,
		arg.Description,
		arg.Status,
		arg.Priority,
		arg.StartDate,
		arg.EndDate,
	)
	return err
}

const UpdateTaskGroupByID = `-- name: UpdateTaskGroupByID :exec
UPDATE task_group SET group_name = $2, description = $3, status = $4, priority = $5, start_date = $6, end_date = $7, updated_at = CURRENT_TIMESTAMP
WHERE task_group_id = $1
`

type UpdateTaskGroupByIDParams struct {
	TaskGroupID int32       `db:"task_group_id" json:"task_group_id"`
	GroupName   string      `db:"group_name" json:"group_name"`
	Description pgtype.Text `db:"description" json:"description"`
	Status      string      `db:"status" json:"status"`
	Priority    string      `db:"priority" json:"priority"`
	StartDate   pgtype.Date `db:"start_date" json:"start_date"`
	EndDate     pgtype.Date `db:"end_date" json:"end_date"`
}

// Update a Task Group's information
func (q *Queries) UpdateTaskGroupByID(ctx context.Context, arg UpdateTaskGroupByIDParams) error {
	_, err := q.db.Exec(ctx, UpdateTaskGroupByID,
		arg.TaskGroupID,
		arg.GroupName,
		arg.Description,
		arg.Status,
		arg.Priority,
		arg.StartDate,
		arg.EndDate,
	)
	return err
}

const UpdateTaskGroupMemberByID = `-- name: UpdateTaskGroupMemberByID :exec
UPDATE task_group_member SET role = $3, updated_at = CURRENT_TIMESTAMP
WHERE member_id = $1 AND task_group_id = $2
`

type UpdateTaskGroupMemberByIDParams struct {
	MemberID    int32  `db:"member_id" json:"member_id"`
	TaskGroupID int32  `db:"task_group_id" json:"task_group_id"`
	Role        string `db:"role" json:"role"`
}

// Update a member's Task Group information
func (q *Queries) UpdateTaskGroupMemberByID(ctx context.Context, arg UpdateTaskGroupMemberByIDParams) error {
	_, err := q.db.Exec(ctx, UpdateTaskGroupMemberByID, arg.MemberID, arg.TaskGroupID, arg.Role)
	return err
}

const UpdateTaskMemberByID = `-- name: UpdateTaskMemberByID :exec
UPDATE task_member SET role = $3, updated_at = CURRENT_TIMESTAMP
WHERE member_id = $1 AND task_id = $2
`

type UpdateTaskMemberByIDParams struct {
	MemberID int32  `db:"member_id" json:"member_id"`
	TaskID   int32  `db:"task_id" json:"task_id"`
	Role     string `db:"role" json:"role"`
}

// Update a member's Task information
func (q *Queries) UpdateTaskMemberByID(ctx context.Context, arg UpdateTaskMemberByIDParams) error {
	_, err := q.db.Exec(ctx, UpdateTaskMemberByID, arg.MemberID, arg.TaskID, arg.Role)
	return err
}
