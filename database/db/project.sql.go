// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: project.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CreateProject = `-- name: CreateProject :one
INSERT INTO project (project_name, description, status, start_date, end_date, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
RETURNING project_id
`

type CreateProjectParams struct {
	ProjectName string      `db:"project_name" json:"project_name"`
	Description pgtype.Text `db:"description" json:"description"`
	Status      string      `db:"status" json:"status"`
	StartDate   pgtype.Date `db:"start_date" json:"start_date"`
	EndDate     pgtype.Date `db:"end_date" json:"end_date"`
}

// Insert a new project into the database
func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (int32, error) {
	row := q.db.QueryRow(ctx, CreateProject,
		arg.ProjectName,
		arg.Description,
		arg.Status,
		arg.StartDate,
		arg.EndDate,
	)
	var project_id int32
	err := row.Scan(&project_id)
	return project_id, err
}

const CreateProjectMember = `-- name: CreateProjectMember :exec
INSERT INTO project_member (member_id, project_id, role, created_at, updated_at)
VALUES ($1, $2, $3, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
`

type CreateProjectMemberParams struct {
	MemberID  int32  `db:"member_id" json:"member_id"`
	ProjectID int32  `db:"project_id" json:"project_id"`
	Role      string `db:"role" json:"role"`
}

// Assign a member to a project
func (q *Queries) CreateProjectMember(ctx context.Context, arg CreateProjectMemberParams) error {
	_, err := q.db.Exec(ctx, CreateProjectMember, arg.MemberID, arg.ProjectID, arg.Role)
	return err
}

const DeleteProjectByID = `-- name: DeleteProjectByID :exec
DELETE FROM project WHERE project_id = $1
`

// Delete a project from the database
func (q *Queries) DeleteProjectByID(ctx context.Context, projectID int32) error {
	_, err := q.db.Exec(ctx, DeleteProjectByID, projectID)
	return err
}

const DeleteProjectMemberByID = `-- name: DeleteProjectMemberByID :exec
DELETE FROM project_member WHERE member_id = $1 AND project_id = $2
`

type DeleteProjectMemberByIDParams struct {
	MemberID  int32 `db:"member_id" json:"member_id"`
	ProjectID int32 `db:"project_id" json:"project_id"`
}

// Remove a member from a project
func (q *Queries) DeleteProjectMemberByID(ctx context.Context, arg DeleteProjectMemberByIDParams) error {
	_, err := q.db.Exec(ctx, DeleteProjectMemberByID, arg.MemberID, arg.ProjectID)
	return err
}

const GetAllProjects = `-- name: GetAllProjects :many
SELECT project_id, project_name, description, status, start_date, end_date, created_at, updated_at FROM project
`

// Get all projects from the database
func (q *Queries) GetAllProjects(ctx context.Context) ([]Project, error) {
	rows, err := q.db.Query(ctx, GetAllProjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ProjectID,
			&i.ProjectName,
			&i.Description,
			&i.Status,
			&i.StartDate,
			&i.EndDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetProjectByID = `-- name: GetProjectByID :one
SELECT project_id, project_name, description, status, start_date, end_date, created_at, updated_at FROM project WHERE project_id = $1
`

// Get a project by its ID
func (q *Queries) GetProjectByID(ctx context.Context, projectID int32) (Project, error) {
	row := q.db.QueryRow(ctx, GetProjectByID, projectID)
	var i Project
	err := row.Scan(
		&i.ProjectID,
		&i.ProjectName,
		&i.Description,
		&i.Status,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetProjectMemberByID = `-- name: GetProjectMemberByID :one
SELECT member_id, project_id, role, created_at, updated_at FROM project_member WHERE member_id = $1 AND project_id = $2
`

type GetProjectMemberByIDParams struct {
	MemberID  int32 `db:"member_id" json:"member_id"`
	ProjectID int32 `db:"project_id" json:"project_id"`
}

// Get a project's member by their ID
func (q *Queries) GetProjectMemberByID(ctx context.Context, arg GetProjectMemberByIDParams) (ProjectMember, error) {
	row := q.db.QueryRow(ctx, GetProjectMemberByID, arg.MemberID, arg.ProjectID)
	var i ProjectMember
	err := row.Scan(
		&i.MemberID,
		&i.ProjectID,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetProjectMembers = `-- name: GetProjectMembers :many
SELECT member_id, project_id, role, created_at, updated_at FROM project_member WHERE project_id = $1
`

// Get all members assigned to a project
func (q *Queries) GetProjectMembers(ctx context.Context, projectID int32) ([]ProjectMember, error) {
	rows, err := q.db.Query(ctx, GetProjectMembers, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProjectMember
	for rows.Next() {
		var i ProjectMember
		if err := rows.Scan(
			&i.MemberID,
			&i.ProjectID,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateProjectByID = `-- name: UpdateProjectByID :exec
UPDATE project SET project_name = $2, description = $3, status = $4, start_date = $5, end_date = $6, updated_at = CURRENT_TIMESTAMP
WHERE project_id = $1
`

type UpdateProjectByIDParams struct {
	ProjectID   int32       `db:"project_id" json:"project_id"`
	ProjectName string      `db:"project_name" json:"project_name"`
	Description pgtype.Text `db:"description" json:"description"`
	Status      string      `db:"status" json:"status"`
	StartDate   pgtype.Date `db:"start_date" json:"start_date"`
	EndDate     pgtype.Date `db:"end_date" json:"end_date"`
}

// Update a project's information
func (q *Queries) UpdateProjectByID(ctx context.Context, arg UpdateProjectByIDParams) error {
	_, err := q.db.Exec(ctx, UpdateProjectByID,
		arg.ProjectID,
		arg.ProjectName,
		arg.Description,
		arg.Status,
		arg.StartDate,
		arg.EndDate,
	)
	return err
}

const UpdateProjectMemberByID = `-- name: UpdateProjectMemberByID :exec
UPDATE project_member SET role = $3, updated_at = CURRENT_TIMESTAMP
WHERE member_id = $1 AND project_id = $2
`

type UpdateProjectMemberByIDParams struct {
	MemberID  int32  `db:"member_id" json:"member_id"`
	ProjectID int32  `db:"project_id" json:"project_id"`
	Role      string `db:"role" json:"role"`
}

// Update a project's member information
func (q *Queries) UpdateProjectMemberByID(ctx context.Context, arg UpdateProjectMemberByIDParams) error {
	_, err := q.db.Exec(ctx, UpdateProjectMemberByID, arg.MemberID, arg.ProjectID, arg.Role)
	return err
}
