// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: auth.sql

package db

import (
	"context"
)

const CreateMemberCredentials = `-- name: CreateMemberCredentials :exec
INSERT INTO member_credentials (member_id, password_hash, password_salt, created_at, updated_at)
VALUES ($1, $2, $3, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
`

type CreateMemberCredentialsParams struct {
	MemberID     int32  `db:"member_id" json:"member_id"`
	PasswordHash string `db:"password_hash" json:"password_hash"`
	PasswordSalt string `db:"password_salt" json:"password_salt"`
}

// Insert a new member's credentials into the database
func (q *Queries) CreateMemberCredentials(ctx context.Context, arg CreateMemberCredentialsParams) error {
	_, err := q.db.Exec(ctx, CreateMemberCredentials, arg.MemberID, arg.PasswordHash, arg.PasswordSalt)
	return err
}

const DeleteMemberCredentialsByID = `-- name: DeleteMemberCredentialsByID :exec
DELETE FROM member_credentials WHERE member_id = $1
`

// Delete a member's credentials from the database
func (q *Queries) DeleteMemberCredentialsByID(ctx context.Context, memberID int32) error {
	_, err := q.db.Exec(ctx, DeleteMemberCredentialsByID, memberID)
	return err
}

const GetMemberCredentialsByID = `-- name: GetMemberCredentialsByID :one
SELECT member_id, password_hash, password_salt, created_at, updated_at FROM member_credentials WHERE member_id = $1
`

// Get a member's credentials by their ID
func (q *Queries) GetMemberCredentialsByID(ctx context.Context, memberID int32) (MemberCredentials, error) {
	row := q.db.QueryRow(ctx, GetMemberCredentialsByID, memberID)
	var i MemberCredentials
	err := row.Scan(
		&i.MemberID,
		&i.PasswordHash,
		&i.PasswordSalt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const UpdateMemberCredentialsByID = `-- name: UpdateMemberCredentialsByID :exec
UPDATE member_credentials SET password_hash = $2, password_salt = $3, updated_at = CURRENT_TIMESTAMP
WHERE member_id = $1
`

type UpdateMemberCredentialsByIDParams struct {
	MemberID     int32  `db:"member_id" json:"member_id"`
	PasswordHash string `db:"password_hash" json:"password_hash"`
	PasswordSalt string `db:"password_salt" json:"password_salt"`
}

// Update a member's credentials
func (q *Queries) UpdateMemberCredentialsByID(ctx context.Context, arg UpdateMemberCredentialsByIDParams) error {
	_, err := q.db.Exec(ctx, UpdateMemberCredentialsByID, arg.MemberID, arg.PasswordHash, arg.PasswordSalt)
	return err
}
