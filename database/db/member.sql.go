// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: member.sql

package db

import (
	"context"
)

const CreateMember = `-- name: CreateMember :execlastid
INSERT INTO member (email, first_name, last_name, created_at, updated_at)
VALUES ($1, $2, $3, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
RETURNING member_id
`

type CreateMemberParams struct {
	Email     string `db:"email" json:"email"`
	FirstName string `db:"first_name" json:"first_name"`
	LastName  string `db:"last_name" json:"last_name"`
}

const DeleteMemberByID = `-- name: DeleteMemberByID :exec
DELETE FROM member WHERE member_id = $1
`

// Delete a member from the database
func (q *Queries) DeleteMemberByID(ctx context.Context, memberID int32) error {
	_, err := q.db.Exec(ctx, DeleteMemberByID, memberID)
	return err
}

const GetAllMembers = `-- name: GetAllMembers :many
SELECT member_id, email, first_name, last_name, created_at, updated_at FROM member
`

// Get all members from the database
func (q *Queries) GetAllMembers(ctx context.Context) ([]Member, error) {
	rows, err := q.db.Query(ctx, GetAllMembers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Member
	for rows.Next() {
		var i Member
		if err := rows.Scan(
			&i.MemberID,
			&i.Email,
			&i.FirstName,
			&i.LastName,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetMemberByID = `-- name: GetMemberByID :one
SELECT member_id, email, first_name, last_name, created_at, updated_at FROM member WHERE member_id = $1
`

// Get a member by their ID
func (q *Queries) GetMemberByID(ctx context.Context, memberID int32) (Member, error) {
	row := q.db.QueryRow(ctx, GetMemberByID, memberID)
	var i Member
	err := row.Scan(
		&i.MemberID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const UpdateMemberByID = `-- name: UpdateMemberByID :exec
UPDATE member SET email = $2, first_name = $3, last_name = $4, updated_at = CURRENT_TIMESTAMP
WHERE member_id = $1
`

type UpdateMemberByIDParams struct {
	MemberID  int32  `db:"member_id" json:"member_id"`
	Email     string `db:"email" json:"email"`
	FirstName string `db:"first_name" json:"first_name"`
	LastName  string `db:"last_name" json:"last_name"`
}

// Update a member's information
func (q *Queries) UpdateMemberByID(ctx context.Context, arg UpdateMemberByIDParams) error {
	_, err := q.db.Exec(ctx, UpdateMemberByID,
		arg.MemberID,
		arg.Email,
		arg.FirstName,
		arg.LastName,
	)
	return err
}
